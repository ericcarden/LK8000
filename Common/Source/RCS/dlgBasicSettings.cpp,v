head	8.3;
access;
symbols
	beta8:8.1;
locks
	root:8.3; strict;
comment	@// @;


8.3
date	2010.12.13.12.29.07;	author root;	state Exp;
branches;
next	8.2;

8.2
date	2010.04.12.16.06.03;	author root;	state Exp;
branches;
next	8.1;

8.1
date	2009.06.19.20.28.25;	author venta;	state Exp;
branches;
next	;


desc
@none
@


8.3
log
@*** empty log message ***
@
text
@/*
   LK8000 Tactical Flight Computer -  WWW.LK8000.IT
   Released under GNU/GPL License v.2
   See CREDITS.TXT file for authors and copyrights

   $Id$
*/

#include "StdAfx.h"

#include "Statistics.h"

#include "externs.h"
#include "Units.h"
#include "McReady.h"
#include "Atmosphere.h"
#include "dlgTools.h"
#include "device.h"
#include "InfoBoxLayout.h"

extern HWND   hWndMainWindow;
static WndForm *wf=NULL;


// static bool BallastTimerActive = false;

static void OnCloseClicked(WindowControl * Sender){
(void)Sender;
	wf->SetModalResult(mrOK);
}

static void OnBallastDump(WindowControl *Sender){
(void)Sender;
        BallastTimerActive=!BallastTimerActive;
	wf->SetModalResult(mrOK);
}


static double INHg=0;

static void OnQnhData(DataField *Sender, DataField::DataAccessKind_t Mode){
  WndProperty* wp;

  switch(Mode){
	case DataField::daGet:
		if (PressureHg) {
			INHg=QNH/TOHPA;
			Sender->Set(INHg); 
		} else {
			Sender->Set(QNH); 
		}
		break;
	case DataField::daPut: 
	case DataField::daChange:
		if (PressureHg) {
			INHg = Sender->GetAsFloat();
			QNH=INHg*TOHPA;
		} else {
			QNH = Sender->GetAsFloat();
		}
		if (CALCULATED_INFO.Flying) QNH=fabs(QNH); 
		devPutQNH(devAll(), QNH);
		AirspaceQnhChangeNotify(QNH);

		// VarioWriteSettings();

		wp = (WndProperty*)wf->FindByName(TEXT("prpAltitude"));
		if (wp) {
			wp->GetDataField()->
			SetAsFloat(Units::ToUserAltitude(GPS_INFO.BaroAltitude));
			wp->RefreshDisplay();
		}
		break;
	default:
		break;
  }

}


static void OnAltitudeData(DataField *Sender, DataField::DataAccessKind_t Mode){
  #if NEWQNH
  static double newalt=0;
  WndProperty* wp;
  #endif
  switch(Mode){
	case DataField::daGet:
#ifndef NEWQNH
	LockFlightData();
	Sender->Set(Units::ToUserAltitude(GPS_INFO.BaroAltitude));  
	UnlockFlightData();
#endif
	break;
  case DataField::daPut:
  case DataField::daChange:
	#if NEWQNH
	newalt = Sender->GetAsFloat();
        QNH=FindQNH(GPS_INFO.BaroAltitude,Units::ToSysAltitude(newalt));  // 100411
	wp = (WndProperty*)wf->FindByName(TEXT("prpQNH"));
	if (wp) {
		if (PressureHg) {
			INHg=QNH/TOHPA;
			wp->GetDataField()-> SetAsFloat(INHg);
		} else {
			wp->GetDataField()-> SetAsFloat(QNH);
		}
		wp->RefreshDisplay();
	}
	#endif
	break;
  }
}


static void SetBallast(bool updateDevices) {
  WndProperty* wp;

  GlidePolar::SetBallast();
  if (updateDevices) { //@@ MATFIX
	devPutBallast(devA(), BALLAST);
	devPutBallast(devB(), BALLAST);
  }
  wp = (WndProperty*)wf->FindByName(TEXT("prpBallastPercent"));
  if (wp) {
    wp->GetDataField()->Set(BALLAST*100);
    wp->RefreshDisplay();
  }
  wp = (WndProperty*)wf->FindByName(TEXT("prpBallastLitres"));
  if (wp) {
    wp->GetDataField()->
      SetAsFloat(GlidePolar::BallastLitres);
    wp->RefreshDisplay();
  }
  wp = (WndProperty*)wf->FindByName(TEXT("prpWingLoading"));
  if (wp) {
    wp->GetDataField()-> SetAsFloat(GlidePolar::WingLoading);
    wp->RefreshDisplay();
  }
  // SetFocus( ((WndButton *)wf->FindByName(TEXT("buttonClose")))->GetHandle()); // not needed
}

//int BallastSecsToEmpty = 120;

static int OnTimerNotify(WindowControl * Sender) {
  (void)Sender;
  // devices are updates by BallastDump() method when dumping water ballast
  SetBallast(false); //@@ MATFIX

  static double altlast = GPS_INFO.BaroAltitude;
  if (fabs(GPS_INFO.BaroAltitude-altlast)>1) {
    WndProperty* wp;
    wp = (WndProperty*)wf->FindByName(TEXT("prpAltitude"));
    if (wp) {
      wp->GetDataField()->
	SetAsFloat(Units::ToUserAltitude(GPS_INFO.BaroAltitude));
      wp->RefreshDisplay();
    }
  }
  altlast = GPS_INFO.BaroAltitude;

  return 0;
}


static void OnBallastData(DataField *Sender, DataField::DataAccessKind_t Mode){
  static double lastRead = -1;

  switch(Mode){
  case DataField::daSpecial:
    if (BALLAST>0.01) {
      BallastTimerActive = !BallastTimerActive;
    } else {
      BallastTimerActive = false;
    }
    ((WndButton *)wf->FindByName(TEXT("buttonDumpBallast")))->SetVisible(!BallastTimerActive);
    ((WndButton *)wf->FindByName(TEXT("buttonStopDump")))->SetVisible(BallastTimerActive);
    break;
  case DataField::daGet:
    lastRead = BALLAST;
    Sender->Set(BALLAST*100);
    break;
  case DataField::daChange:
  case DataField::daPut:
    if (fabs(lastRead-Sender->GetAsFloat()/100.0) >= 0.005){
      lastRead = BALLAST = Sender->GetAsFloat()/100.0;
      SetBallast(true);
    }
    break;
  }
}

static void OnBugsData(DataField *Sender, DataField::DataAccessKind_t Mode){

  static double lastRead = -1;

  switch(Mode){
    case DataField::daGet:
      lastRead = BUGS;
      Sender->Set(BUGS*100);
    break;
    case DataField::daChange:
    case DataField::daPut:
      if (fabs(lastRead-Sender->GetAsFloat()/100.0) >= 0.005){
        lastRead = BUGS = Sender->GetAsFloat()/100.0;
        GlidePolar::SetBallast();
        devPutBugs(devA(), BUGS);
        devPutBugs(devB(), BUGS);
      }
    break;
  }

}

static void OnWingLoadingData(DataField *Sender, DataField::DataAccessKind_t Mode) { // 100127
  static double lastRead = -1;
  switch(Mode){
	case DataField::daGet:
		lastRead = GlidePolar::WingLoading;
		Sender->Set(GlidePolar::WingLoading);
		break;
	case DataField::daChange:
	case DataField::daPut:
		if (fabs(lastRead-Sender->GetAsFloat()) > 0) {
			lastRead = Sender->GetAsFloat();
			WeightOffset(lastRead);  
		}
		break;
  }
}


static void OnTempData(DataField *Sender, DataField::DataAccessKind_t Mode){
  static double lastRead = -1;

  switch(Mode){
    case DataField::daGet:
      lastRead = CuSonde::maxGroundTemperature;
      Sender->Set(CuSonde::maxGroundTemperature);
    break;
    case DataField::daChange:
    case DataField::daPut:
      if (fabs(lastRead-Sender->GetAsFloat()) >= 1.0){
        lastRead = Sender->GetAsFloat();
        CuSonde::setForecastTemperature(Sender->GetAsFloat());
      }
    break;
  }
}


static CallBackTableEntry_t CallBackTable[]={
  DeclareCallBackEntry(OnBugsData),
  DeclareCallBackEntry(OnWingLoadingData), 
  DeclareCallBackEntry(OnTempData),
  DeclareCallBackEntry(OnBallastData),
  DeclareCallBackEntry(OnAltitudeData),
  DeclareCallBackEntry(OnQnhData), 
  DeclareCallBackEntry(OnCloseClicked),
  DeclareCallBackEntry(OnBallastDump),
  DeclareCallBackEntry(NULL)
};


void dlgBasicSettingsShowModal(void){


  char filename[MAX_PATH];
  LocalPathS(filename, TEXT("dlgBasicSettings.xml"));
  if (!InfoBoxLayout::landscape) 
	wf = dlgLoadFromXML(CallBackTable, filename, hWndMainWindow, TEXT("IDR_XML_BASICSETTINGS_L"));
  else
	wf = dlgLoadFromXML(CallBackTable, filename, hWndMainWindow, TEXT("IDR_XML_BASICSETTINGS"));

  WndProperty* wp;

//  BallastTimerActive = false;

  if (wf) {

    wf->SetTimerNotify(OnTimerNotify);

    ((WndButton *)wf->FindByName(TEXT("buttonDumpBallast")))->SetVisible(!BallastTimerActive);
    ((WndButton *)wf->FindByName(TEXT("buttonStopDump")))->SetVisible(BallastTimerActive);

    wp = (WndProperty*)wf->FindByName(TEXT("prpAltitude"));
    if (wp) {
      wp->GetDataField()->SetAsFloat(
	       Units::ToUserAltitude(GPS_INFO.BaroAltitude));
      wp->GetDataField()->SetUnits(Units::GetAltitudeName());
      wp->RefreshDisplay();
    }
    wp = (WndProperty*)wf->FindByName(TEXT("prpBallastLitres"));
    if (wp) {
      wp->GetDataField()-> SetAsFloat(GlidePolar::BallastLitres);
      wp->RefreshDisplay();
    }
    wp = (WndProperty*)wf->FindByName(TEXT("prpWingLoading"));
    if (wp) {
      if (GlidePolar::WingLoading>0.1) {
	wp->GetDataField()-> SetAsFloat(GlidePolar::WingLoading);
      } else {
	wp->SetVisible(false);
      }
      wp->RefreshDisplay();
    }
    if (CALCULATED_INFO.Flying) {
	wp = (WndProperty*)wf->FindByName(TEXT("prpQNH"));
	if (wp) {
		wp->GetDataField()->SetDisplayFormat(_T("%.0f"));
	}
    }

    wf->ShowModal();
    delete wf;
  }
  wf = NULL;

}

@


8.2
log
@*** empty log message ***
@
text
@d2 3
a4 1
Copyright_License {
d6 1
a6 29
  XCSoar Glide Computer - http://xcsoar.sourceforge.net/
  Copyright (C) 2000 - 2008  

  	M Roberts (original release)
	Robin Birch <robinb@@ruffnready.co.uk>
	Samuel Gisiger <samuel.gisiger@@triadis.ch>
	Jeff Goodenough <jeff@@enborne.f2s.com>
	Alastair Harrison <aharrison@@magic.force9.co.uk>
	Scott Penrose <scottp@@dd.com.au>
	John Wharington <jwharington@@gmail.com>
	Lars H <lars_hn@@hotmail.com>
	Rob Dunning <rob@@raspberryridgesheepfarm.com>
	Russell King <rmk@@arm.linux.org.uk>

  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public License
  as published by the Free Software Foundation; either version 2
  of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

}
d19 1
d24 1
d45 31
a75 21
    case DataField::daGet:
      Sender->Set(QNH); 
    break;
    case DataField::daPut: 
    case DataField::daChange:
      QNH = Sender->GetAsFloat();
      INHg = (int)QNH;
      INHg = INHg*29.91/1013.2;

      devPutQNH(devAll(), QNH);
      AirspaceQnhChangeNotify(QNH);

      // VarioWriteSettings();

      wp = (WndProperty*)wf->FindByName(TEXT("prpAltitude"));
      if (wp) {
	wp->GetDataField()->
	  SetAsFloat(Units::ToUserAltitude(GPS_INFO.BaroAltitude));
	wp->RefreshDisplay();
      }
    break;
a80 2
// TODO bug: Check, this isn't updating properly?
///: 100129 BUGFIX of course it did not work. You must change QNH, not the resulting altitude!!
a95 1
	///: 100129 XCSOAR BUGFIX Change altitude and set QNH accordingly
a97 1
        ///: QNH=FindQNH(GPS_INFO.BaroAltitude,newalt);  BUG FIXED 100411
d101 6
a106 1
		wp->GetDataField()-> SetAsFloat(QNH);
d115 1
a115 1
static void SetBallast(void) {
d119 4
a122 2
  devPutBallast(devA(), BALLAST);
  devPutBallast(devB(), BALLAST);
d139 1
d146 2
a147 24
/*
  static double BallastTimeLast = -1;

  if (BallastTimerActive) {
    if (GPS_INFO.Time > BallastTimeLast) {
      double BALLAST_last = BALLAST;
      double dt = GPS_INFO.Time - BallastTimeLast;
      double percent_per_second = 1.0/max(10.0, BallastSecsToEmpty);
      BALLAST -= dt*percent_per_second;
      if (BALLAST<0) {
	BallastTimerActive = false;
	BALLAST = 0.0;
      }
      if (fabs(BALLAST-BALLAST_last)>0.001) {
	SetBallast();
      }      
    }
    BallastTimeLast = GPS_INFO.Time;
  } else {
    BallastTimeLast = GPS_INFO.Time;
  }
*/

  SetBallast();
d186 1
a186 1
      SetBallast();
a213 1
#if 100127
d223 1
a223 1
		if (fabs(lastRead-Sender->GetAsFloat()) >= 1.0) {
a229 1
#endif
d269 4
a272 4
  wf = dlgLoadFromXML(CallBackTable, 
                      filename, 
		      hWndMainWindow,
		      TEXT("IDR_XML_BASICSETTINGS"));
d306 6
@


8.1
log
@beta8
@
text
@d70 1
a70 1
      Sender->Set(QNH);
d96 1
d98 4
d103 21
a123 9
    case DataField::daGet:
      LockFlightData();
      Sender->Set(Units::ToUserAltitude(GPS_INFO.BaroAltitude));
      UnlockFlightData();
    break;
    case DataField::daPut:
    break;
    case DataField::daChange:
    break;
d147 1
a147 2
    wp->GetDataField()->
      SetAsFloat(GlidePolar::WingLoading);
d246 19
d287 1
d300 1
d328 1
a328 2
      wp->GetDataField()->
	SetAsFloat(GlidePolar::BallastLitres);
d334 1
a334 2
	wp->GetDataField()->
	  SetAsFloat(GlidePolar::WingLoading);
@
