head	1.1;
access;
symbols;
locks
	root:1.1; strict;
comment	@// @;


1.1
date	2010.12.13.13.32.44;	author root;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
   LK8000 Tactical Flight Computer -  WWW.LK8000.IT
   Released under GNU/GPL License v.2
   See CREDITS.TXT file for authors and copyrights

   $Id$
*/

#include "StdAfx.h"
#include <aygshell.h>

#include "XCSoar.h"

#include "externs.h"
#include "dlgTools.h"

#include "compatibility.h"
#ifdef OLDPPC
#include "XCSoarProcess.h"
#else
#include "Process.h"
#endif

#include "Terrain.h"
#include "LKMapWindow.h"

#include "Utils.h"

void AddConfList( DataFieldEnum* dfe);

static bool changed = false;
static WndForm *wf=NULL;


static void OnCustomKeysActiveData(DataField *Sender, DataField::DataAccessKind_t Mode){
  switch(Mode){
    case DataField::daGet:
    break;
    case DataField::daPut:
    case DataField::daChange:
    break;
  }
}

static void OnCloseClicked(WindowControl * Sender){
	(void)Sender;
  wf->SetModalResult(mrOK);
}


static void setVariables(void) {
  WndProperty *wp;

  wp = (WndProperty*)wf->FindByName(TEXT("prpCustomKeyTime"));
  if (wp) {
	wp->GetDataField()->SetAsFloat(CustomKeyTime);
	wp->RefreshDisplay();
  }

  wp = (WndProperty*)wf->FindByName(TEXT("prpCustomKeyModeLeftUpCorner"));
  if (wp) {
	DataFieldEnum* dfe;
	dfe = (DataFieldEnum*)wp->GetDataField();
	AddConfList(dfe);
	//#include "LKinclude_confcuskey.cpp" REMOVE
	dfe->Set(CustomKeyModeLeftUpCorner);
	wp->RefreshDisplay();
  }
  wp = (WndProperty*)wf->FindByName(TEXT("prpCustomKeyModeRightUpCorner"));
  if (wp) {
	DataFieldEnum* dfe;
	dfe = (DataFieldEnum*)wp->GetDataField();
	AddConfList(dfe);
	//#include "LKinclude_confcuskey.cpp" REMOVE
	dfe->Set(CustomKeyModeRightUpCorner);
	dfe->Set(CustomKeyModeRightUpCorner);
	if (ISPARAGLIDER) wp->SetReadOnly(true);
	wp->RefreshDisplay();
  }


  wp = (WndProperty*)wf->FindByName(TEXT("prpCustomKeyModeCenter"));
  if (wp) {
	DataFieldEnum* dfe;
	dfe = (DataFieldEnum*)wp->GetDataField();
	AddConfList(dfe);
	//#include "LKinclude_confcuskey.cpp" REMOVE
	dfe->Set(CustomKeyModeCenter);
	wp->RefreshDisplay();
  }

  wp = (WndProperty*)wf->FindByName(TEXT("prpCustomKeyModeLeft"));
  if (wp) {
	DataFieldEnum* dfe;
	dfe = (DataFieldEnum*)wp->GetDataField();
	AddConfList(dfe);
	//#include "LKinclude_confcuskey.cpp" REMOVE
	dfe->Set(CustomKeyModeLeft);
	wp->RefreshDisplay();
  }
  wp = (WndProperty*)wf->FindByName(TEXT("prpCustomKeyModeRight"));
  if (wp) {
	DataFieldEnum* dfe;
	dfe = (DataFieldEnum*)wp->GetDataField();
	AddConfList(dfe);
	//#include "LKinclude_confcuskey.cpp" // REMOVE
	dfe->Set(CustomKeyModeRight);
	wp->RefreshDisplay();
  }
  wp = (WndProperty*)wf->FindByName(TEXT("prpCustomKeyModeAircraftIcon"));
  if (wp) {
	DataFieldEnum* dfe;
	dfe = (DataFieldEnum*)wp->GetDataField();
	//#include "LKinclude_confcuskey.cpp" // REMOVE
	AddConfList(dfe);
	dfe->addEnumText(TEXT("Toggle IBOX"));
	dfe->Set(CustomKeyModeAircraftIcon);
	wp->RefreshDisplay();
  }

}



static CallBackTableEntry_t CallBackTable[]={
  DeclareCallBackEntry(OnCustomKeysActiveData),
  DeclareCallBackEntry(OnCloseClicked),
  DeclareCallBackEntry(NULL)
};


void dlgCustomKeysShowModal(void){

  WndProperty *wp;
  char filename[MAX_PATH];
  LocalPathS(filename, TEXT("dlgCustomKeys.xml"));
  wf = dlgLoadFromXML(CallBackTable,                        
		      filename, 
		      hWndMainWindow,
		      TEXT("IDR_XML_CUSTOMKEYS"));

  if (!wf) return;

  setVariables();

  changed = false;

  wf->ShowModal();

  wp = (WndProperty*)wf->FindByName(TEXT("prpCustomKeyModeLeftUpCorner"));
  if (wp) {
	if (CustomKeyModeLeftUpCorner != (wp->GetDataField()->GetAsInteger())) {
		CustomKeyModeLeftUpCorner = (wp->GetDataField()->GetAsInteger());
		SetToRegistry(szRegistryCustomKeyModeLeftUpCorner, (DWORD)(CustomKeyModeLeftUpCorner));
		changed=true;
	}
  }
  wp = (WndProperty*)wf->FindByName(TEXT("prpCustomKeyModeRightUpCorner"));
  if (wp) {
	if (CustomKeyModeRightUpCorner != (wp->GetDataField()->GetAsInteger())) {
		CustomKeyModeRightUpCorner = (wp->GetDataField()->GetAsInteger());
		SetToRegistry(szRegistryCustomKeyModeRightUpCorner, (DWORD)(CustomKeyModeRightUpCorner));
		changed=true;
	}
  }
  wp = (WndProperty*)wf->FindByName(TEXT("prpCustomKeyModeCenter"));
  if (wp) {
	if (CustomKeyModeCenter != (wp->GetDataField()->GetAsInteger())) {
		CustomKeyModeCenter = (wp->GetDataField()->GetAsInteger());
		SetToRegistry(szRegistryCustomKeyModeCenter, (DWORD)(CustomKeyModeCenter));
		changed=true;
	}
  }
  wp = (WndProperty*)wf->FindByName(TEXT("prpCustomKeyTime"));
  if (wp) {
	if (CustomKeyTime != wp->GetDataField()->GetAsInteger()) {
		CustomKeyTime = wp->GetDataField()->GetAsInteger();
		SetToRegistry(szRegistryCustomKeyTime,CustomKeyTime);
		changed = true;
	}
  }
  wp = (WndProperty*)wf->FindByName(TEXT("prpCustomKeyModeLeft"));
  if (wp) {
	if (CustomKeyModeLeft != (wp->GetDataField()->GetAsInteger())) {
		CustomKeyModeLeft = (wp->GetDataField()->GetAsInteger());
		SetToRegistry(szRegistryCustomKeyModeLeft, (DWORD)(CustomKeyModeLeft));
		changed=true;
	}
  }
  wp = (WndProperty*)wf->FindByName(TEXT("prpCustomKeyModeRight"));
  if (wp) {
	if (CustomKeyModeRight != (wp->GetDataField()->GetAsInteger())) {
		CustomKeyModeRight = (wp->GetDataField()->GetAsInteger());
		SetToRegistry(szRegistryCustomKeyModeRight, (DWORD)(CustomKeyModeRight));
		changed=true;
	}
  }
  wp = (WndProperty*)wf->FindByName(TEXT("prpCustomKeyModeAircraftIcon"));
  if (wp) {
	if (CustomKeyModeAircraftIcon != (wp->GetDataField()->GetAsInteger())) {
		CustomKeyModeAircraftIcon = (wp->GetDataField()->GetAsInteger());
		SetToRegistry(szRegistryCustomKeyModeAircraftIcon, (DWORD)(CustomKeyModeAircraftIcon));
		changed=true;
	}
  }

  if (changed) {
    StoreRegistry();
    MessageBoxX (hWndMainWindow, 
		 gettext(TEXT("Custom keys config saved")), 
		 TEXT(""), MB_OK);
  }


  delete wf;
  wf = NULL;

}


void AddConfList( DataFieldEnum* dfe) {

    dfe->addEnumText(gettext(TEXT("Disabled")));
    dfe->addEnumText(gettext(TEXT("Menu")));
    dfe->addEnumText(gettext(TEXT("Page Back")));
    dfe->addEnumText(gettext(TEXT("Toggle Map<>current page")));
    dfe->addEnumText(gettext(TEXT("Toggle Map<>Landables")));
    dfe->addEnumText(gettext(TEXT("Landables")));
    dfe->addEnumText(gettext(TEXT("Toggle Map<>Commons")));
    dfe->addEnumText(gettext(TEXT("Commons")));
    dfe->addEnumText(gettext(TEXT("Toggle Map<>Traffic")));
    dfe->addEnumText(gettext(TEXT("Traffic")));
    dfe->addEnumText(gettext(TEXT("Invert colors")));
    dfe->addEnumText(TEXT("TrueWind"));
    dfe->addEnumText(gettext(TEXT("Toggle overlays")));
    dfe->addEnumText(TEXT("AutoZoom On/Off"));
    dfe->addEnumText(TEXT("ActiveMap On/Off"));
    dfe->addEnumText(gettext(TEXT("Mark Location")));
    dfe->addEnumText(TEXT("PG/Delta Time Gates"));
    dfe->addEnumText(TEXT("Thermal Booster"));
    dfe->addEnumText(gettext(TEXT("Goto Home")));
    dfe->addEnumText(gettext(TEXT("Panorama trigger")));
    dfe->addEnumText(gettext(TEXT("Multitarget rotate")));
    dfe->addEnumText(gettext(TEXT("Multitarget menu")));
    dfe->addEnumText(gettext(TEXT("Team code")));
    dfe->addEnumText(gettext(TEXT("Use HBar on/off")));
    dfe->addEnumText(gettext(TEXT("Basic Setup menu")));
    dfe->addEnumText(TEXT("SIMulation menu"));

}


@
