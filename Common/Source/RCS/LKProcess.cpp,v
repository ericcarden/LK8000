head	1.8;
access;
symbols;
locks
	root:1.8; strict;
comment	@// @;


1.8
date	2010.12.11.19.32.14;	author root;	state Exp;
branches;
next	1.7;

1.7
date	2010.01.26.17.19.09;	author root;	state Exp;
branches;
next	1.6;

1.6
date	2009.12.21.17.57.34;	author root;	state Exp;
branches;
next	1.5;

1.5
date	2009.12.16.13.57.35;	author root;	state Exp;
branches;
next	1.4;

1.4
date	2009.11.01.16.22.35;	author root;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.16.10.59.24;	author root;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.07.19.08.58;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2009.09.02.20.29.08;	author root;	state Exp;
branches;
next	;


desc
@@


1.8
log
@*** empty log message ***
@
text
@/*
   LK8000 Tactical Flight Computer -  WWW.LK8000.IT
   Released under GNU/GPL License v.2
   See CREDITS.TXT file for authors and copyrights

   $Id: LKProcess.cpp,v 1.7 2010/01/26 17:19:09 root Exp root $
*/

#include "StdAfx.h"
#include "options.h"
#include "Cpustats.h"
#include "XCSoar.h"
#include "Utils2.h"
#include "compatibility.h"
#include "MapWindow.h"
#include "Units.h"
#include "McReady.h"
#include "externs.h"
#include "InputEvents.h"
#include <windows.h>
#include <math.h>
#include <tchar.h>
#include "InfoBoxLayout.h"
#include "Logger.h"
#include "Process.h"
#include "Task.h"

// #define NULLSHORT	"--" 
#define NULLMEDIUM	"---"
#define NULLLONG	"---"
#define NULLTIME	"--:--"
#define INFINVAL	"oo"

extern int PDABatteryPercent;
extern int PDABatteryFlag;
extern int PDABatteryStatus;

// below this value, altitude differences are useless and not returned
//#define	ALTDIFFLIMIT	-2000


// Returns true if value is valid, false if not
// lktitle is shorter and limited to 6 or 7 chars, good for navboxes
// Units are empty by default, and valid is false by default
bool MapWindow::LKFormatValue(const short lkindex, const bool lktitle, TCHAR *BufferValue, TCHAR *BufferUnit, TCHAR *BufferTitle) {

  static int	index=-1;
  static double value;
  static int	ivalue;
  static char	text[LKSIZETEXT];
  static bool   doinit=true;
  static TCHAR	varformat[10];

  // By default, invalid return value. Set it to true after assigning value in cases
  bool		valid=false;

  if (doinit) {

	if (LIFTMODIFY==TOFEETPERMINUTE)
		_stprintf(varformat,TEXT("%%+.0f"));
	else
		_stprintf(varformat,TEXT("%%+0.1f"));

	doinit=false;
  }


	_tcscpy(BufferUnit,_T(""));

	switch(lkindex) {

		// B135
		case LK_TIME_LOCALSEC:
			Units::TimeToTextS(BufferValue, (int)DetectCurrentTime());
			valid=true;
			if (lktitle)
				_stprintf(BufferTitle,TEXT("Time"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );

			break;
		// B39
		case LK_TIME_LOCAL:
			Units::TimeToText(BufferValue, (int)DetectCurrentTime());
			valid=true;
			if (lktitle)
				_stprintf(BufferTitle,TEXT("Time"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );

			break;

		// B40
		case LK_TIME_UTC:
			Units::TimeToText(BufferValue,(int) GPS_INFO.Time);
			valid=true;
			if (lktitle)
				_stprintf(BufferTitle,TEXT("UTC"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );

			break;

		// B03
		case LK_BRG:
			wsprintf(BufferValue,_T(NULLLONG));
			if (lktitle)
				_stprintf(BufferTitle, TEXT("Brg"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			if ( ValidTaskPoint(ActiveWayPoint) != false ) {
				index = Task[ActiveWayPoint].Index;
				if (index>=0) {
					// This value in AAT is not the waypoint bearing!
					value = WayPointCalc[index].Bearing;
					valid=true;
#ifndef __MINGW32__
					if (value > 1)
						_stprintf(BufferValue, TEXT("%2.0f°"), value);
					else if (value < -1)
						_stprintf(BufferValue, TEXT("%2.0f°"), -value);
						else
							_tcscpy(BufferValue, TEXT("0°"));
#else
					if (value > 1)
						_stprintf(BufferValue, TEXT("%2.0fÂ°"), value);
					else if (value < -1)
						_stprintf(BufferValue, TEXT("%2.0fÂ°"), -value);
						else
							_tcscpy(BufferValue, TEXT("0Â°"));
#endif
				}
			}
			break;

		// B78
		case LK_HOMERADIAL:
			wsprintf(BufferValue,_T(NULLLONG));
			if (lktitle)
				_stprintf(BufferTitle, TEXT("Radl"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );

			if ( ValidWayPoint(HomeWaypoint) != false ) {
				if (CALCULATED_INFO.HomeDistance >10.0) {
					// homeradial == 0, ok?
					value = CALCULATED_INFO.HomeRadial;
					valid=true;
#ifndef __MINGW32__
					if (value > 1)
						_stprintf(BufferValue, TEXT("%2.0f°"), value);
					else if (value < -1)
						_stprintf(BufferValue, TEXT("%2.0f°"), -value);
						else
							_tcscpy(BufferValue, TEXT("0°"));
#else
					if (value > 1)
						_stprintf(BufferValue, TEXT("%2.0fÂ°"), value);
					else if (value < -1)
						_stprintf(BufferValue, TEXT("%2.0fÂ°"), -value);
						else
							_tcscpy(BufferValue, TEXT("0Â°"));
#endif
				}
			}
			break;

		// B47
		case LK_BRGDIFF:
			wsprintf(BufferValue,_T(NULLMEDIUM)); // 091221
			if (lktitle)
				_stprintf(BufferTitle, TEXT("To"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			if ( ValidTaskPoint(ActiveWayPoint) != false ) {
				index = Task[ActiveWayPoint].Index;
				if (index>=0) {
					if (DisplayMode != dmCircling)
					{
						value = WayPointCalc[index].Bearing -  GPS_INFO.TrackBearing;
						valid=true;
						if (value < -180.0)
							value += 360.0;
						else
							if (value > 180.0)
								value -= 360.0;
#ifndef __MINGW32__
						if (value > 1)
							_stprintf(BufferValue, TEXT("%2.0f°»"), value);
						else if (value < -1)
							_stprintf(BufferValue, TEXT("«%2.0f°"), -value);
							else
								_tcscpy(BufferValue, TEXT("«»"));
#else
						if (value > 1)
						_stprintf(BufferValue, TEXT("%2.0fÂ°Â»"), value);
						else if (value < -1)
						_stprintf(BufferValue, TEXT("Â«%2.0fÂ°"), -value);
						else
							_tcscpy(BufferValue, TEXT("Â«Â»"));
					}
#endif
				}
			}
			break;
#if 0
		// B151 UNUSED
		case LK_ALT1_BRGDIFF:
			wsprintf(BufferValue,_T(NULLMEDIUM)); 
			_stprintf(BufferTitle, TEXT("To"));
			if ( ValidWayPoint(Alternate1) != false ) {
				index = Alternate1;
				if (index>=0) {
					if (DisplayMode != dmCircling)
					{
						value = WayPointCalc[index].Bearing -  GPS_INFO.TrackBearing;
						valid=true;
						if (value < -180.0)
							value += 360.0;
						else
							if (value > 180.0)
								value -= 360.0;
#ifndef __MINGW32__
						if (value > 1)
							_stprintf(BufferValue, TEXT("%2.0f°»"), value);
						else if (value < -1)
							_stprintf(BufferValue, TEXT("«%2.0f°"), -value);
							else
								_tcscpy(BufferValue, TEXT("«»"));
#else
						if (value > 1)
						_stprintf(BufferValue, TEXT("%2.0fÂ°Â»"), value);
						else if (value < -1)
						_stprintf(BufferValue, TEXT("Â«%2.0fÂ°"), -value);
						else
							_tcscpy(BufferValue, TEXT("Â«Â»"));
					}
#endif
				}
			}
			break;

		// B152 UNUSED
		case LK_ALT2_BRGDIFF:
			wsprintf(BufferValue,_T(NULLMEDIUM)); 
			_stprintf(BufferTitle, TEXT("To"));
			if ( ValidWayPoint(Alternate2) != false ) {
				index = Alternate2;
				if (index>=0) {
					if (DisplayMode != dmCircling)
					{
						value = WayPointCalc[index].Bearing -  GPS_INFO.TrackBearing;
						valid=true;
						if (value < -180.0)
							value += 360.0;
						else
							if (value > 180.0)
								value -= 360.0;
#ifndef __MINGW32__
						if (value > 1)
							_stprintf(BufferValue, TEXT("%2.0f°»"), value);
						else if (value < -1)
							_stprintf(BufferValue, TEXT("«%2.0f°"), -value);
							else
								_tcscpy(BufferValue, TEXT("«»"));
#else
						if (value > 1)
						_stprintf(BufferValue, TEXT("%2.0fÂ°Â»"), value);
						else if (value < -1)
						_stprintf(BufferValue, TEXT("Â«%2.0fÂ°"), -value);
						else
							_tcscpy(BufferValue, TEXT("Â«Â»"));
					}
#endif
				}
			}
			break;

		// B153 UNUSED
		case LK_BALT_BRGDIFF:
			wsprintf(BufferValue,_T(NULLMEDIUM)); 
			_stprintf(BufferTitle, TEXT("To"));
			if ( ValidWayPoint(BestAlternate) != false ) {
				index = BestAlternate;
				if (index>=0) {
					if (DisplayMode != dmCircling)
					{
						value = WayPointCalc[index].Bearing -  GPS_INFO.TrackBearing;
						valid=true;
						if (value < -180.0)
							value += 360.0;
						else
							if (value > 180.0)
								value -= 360.0;
#ifndef __MINGW32__
						if (value > 1)
							_stprintf(BufferValue, TEXT("%2.0f°»"), value);
						else if (value < -1)
							_stprintf(BufferValue, TEXT("«%2.0f°"), -value);
							else
								_tcscpy(BufferValue, TEXT("«»"));
#else
						if (value > 1)
						_stprintf(BufferValue, TEXT("%2.0fÂ°Â»"), value);
						else if (value < -1)
						_stprintf(BufferValue, TEXT("Â«%2.0fÂ°"), -value);
						else
							_tcscpy(BufferValue, TEXT("Â«Â»"));
					}
#endif
				}
			}
			break;

		// B155 UNUSED
		case LK_LASTTHERMAL_BRGDIFF:
			wsprintf(BufferValue,_T(NULLMEDIUM)); 
			_stprintf(BufferTitle, TEXT("To"));
			if ( ValidResWayPoint(RESWP_LASTTHERMAL) != false ) {
				index = RESWP_LASTTHERMAL;
				if (index>=0) {
					if (DisplayMode != dmCircling)
					{
						value = WayPointCalc[index].Bearing -  GPS_INFO.TrackBearing;
						valid=true;
						if (value < -180.0)
							value += 360.0;
						else
							if (value > 180.0)
								value -= 360.0;
#ifndef __MINGW32__
						if (value > 1)
							_stprintf(BufferValue, TEXT("%2.0f°»"), value);
						else if (value < -1)
							_stprintf(BufferValue, TEXT("«%2.0f°"), -value);
							else
								_tcscpy(BufferValue, TEXT("«»"));
#else
						if (value > 1)
						_stprintf(BufferValue, TEXT("%2.0fÂ°Â»"), value);
						else if (value < -1)
						_stprintf(BufferValue, TEXT("Â«%2.0fÂ°"), -value);
						else
							_tcscpy(BufferValue, TEXT("Â«Â»"));
					}
#endif
				}
			}
			break;

#endif
		// B11
		case LK_NEXT_DIST:
			if ( ValidTaskPoint(ActiveWayPoint) != false ) {
				index = Task[ActiveWayPoint].Index;
				if (index>=0) {
					value=CALCULATED_INFO.WaypointDistance*DISTANCEMODIFY;
					valid=true;
					if (value>99)
						sprintf(text,"%.0f",value);
					else
						sprintf(text,"%.1f",value);
				} else {
					strcpy(text,NULLMEDIUM); // 091221
				}
			} else {
				strcpy(text,NULLMEDIUM); // 091221
			}
			wsprintf(BufferValue, TEXT("%S"),text);
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetDistanceName()));
			if (lktitle)
				_tcscpy(BufferTitle, _T("Dis"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			break;
#if 0
		// B148  UNUSED
		case LK_ALT1_DIST:
			if(ValidWayPoint(Alternate1)) {
				index = Alternate1;
				if (index>=0) {
					value=WayPointCalc[index].Distance*DISTANCEMODIFY;
					valid=true;
					if (value>99)
						sprintf(text,"%.0f",value);
					else
						sprintf(text,"%.1f",value);
				} else {
					strcpy(text,NULLMEDIUM);
				}
			} else {
				strcpy(text,NULLMEDIUM);
			}
			wsprintf(BufferValue, TEXT("%S"),text);
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetDistanceName()));
			break;

		// B149  UNUSED
		case LK_ALT2_DIST:
			if(ValidWayPoint(Alternate2)) {
				index = Alternate2;
				if (index>=0) {
					value=WayPointCalc[index].Distance*DISTANCEMODIFY;
					valid=true;
					if (value>99)
						sprintf(text,"%.0f",value);
					else
						sprintf(text,"%.1f",value);
				} else {
					strcpy(text,NULLMEDIUM);
				}
			} else {
				strcpy(text,NULLMEDIUM);
			}
			wsprintf(BufferValue, TEXT("%S"),text);
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetDistanceName()));
			break;

		// B150  100919 UNUSED
		case LK_BALT_DIST:
			if(ValidWayPoint(BestAlternate)) {
				index = BestAlternate;
				if (index>=0) {
					value=WayPointCalc[index].Distance*DISTANCEMODIFY;
					valid=true;
					if (value>99)
						sprintf(text,"%.0f",value);
					else
						sprintf(text,"%.1f",value);
				} else {
					strcpy(text,NULLMEDIUM);
				}
			} else {
				strcpy(text,NULLMEDIUM);
			}
			wsprintf(BufferValue, TEXT("%S"),text);
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetDistanceName()));
			break;

		// B154  100919 UNUSED
		case LK_LASTTHERMAL_DIST:
			if(ValidResWayPoint(RESWP_LASTTHERMAL)) {
				index = RESWP_LASTTHERMAL;
				if (index>=0) {
					value=WayPointCalc[index].Distance*DISTANCEMODIFY;
					valid=true;
					if (value>99)
						sprintf(text,"%.0f",value);
					else
						sprintf(text,"%.1f",value);
				} else {
					strcpy(text,NULLMEDIUM);
				}
			} else {
				strcpy(text,NULLMEDIUM);
			}
			wsprintf(BufferValue, TEXT("%S"),text);
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetDistanceName()));
			break;
#endif

		// B147 Distance from the start sector, always available also after start
		case LK_START_DIST:
			if ( ValidTaskPoint(0) && ValidTaskPoint(1) ) { // if real task
				index = Task[0].Index;
				if (index>=0) {
					value=(CALCULATED_INFO.WaypointDistance-StartRadius)*DISTANCEMODIFY;
					if (value<0) value*=-1; // 101112 BUGFIX
					valid=true;
					if (value>99)
						sprintf(text,"%.0f",value);
					else {
						if (value>10) {
							sprintf(text,"%.1f",value);
						} else 
							sprintf(text,"%.3f",value);
					}
				} else {
					strcpy(text,NULLMEDIUM); // 091221
				}
			} else {
				strcpy(text,NULLMEDIUM); // 091221
			}
			wsprintf(BufferValue, TEXT("%S"),text);
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetDistanceName()));
			_tcscpy(BufferTitle, _T("StDis"));
			break;


		// B60
		case LK_HOME_DIST:
			if (HomeWaypoint>=0) {
				if ( ValidWayPoint(HomeWaypoint) != false ) {
					value=CALCULATED_INFO.HomeDistance*DISTANCEMODIFY;
					valid=true;
					if (value>99)
						sprintf(text,"%.0f",value);
					else
						sprintf(text,"%.1f",value);
				} else {
					strcpy(text,NULLMEDIUM); // 091221
				}
			} else {
				strcpy(text,NULLMEDIUM); // 091221
			}
			wsprintf(BufferValue, TEXT("%S"),text);
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetDistanceName()));
			if (lktitle)
				wsprintf(BufferTitle, TEXT("Home"),text);
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			break;

		// B83
		case LK_ODOMETER:
			if (CALCULATED_INFO.Odometer>0) {
				value=CALCULATED_INFO.Odometer*DISTANCEMODIFY;
				valid=true;
				if (value>99)
					sprintf(text,"%.0f",value);
				else
					sprintf(text,"%.1f",value);
			} else {
				strcpy(text,NULLMEDIUM); // 091221
			}
			wsprintf(BufferValue, TEXT("%S"),text);
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetDistanceName()));
			if (lktitle)
				wsprintf(BufferTitle, TEXT("Odomet"),text);
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			break;

		// B28
		case LK_AA_DISTMAX:
		// B29
		case LK_AA_DISTMIN:
			if ( (ValidTaskPoint(ActiveWayPoint) != false) && AATEnabled ) {
				index = Task[ActiveWayPoint].Index;
				if (index>=0) {
					if ( lkindex == LK_AA_DISTMAX )
						value = DISTANCEMODIFY*CALCULATED_INFO.AATMaxDistance ;
					else
						value = DISTANCEMODIFY*CALCULATED_INFO.AATMinDistance ;
					valid=true;
					if (value>99)
						sprintf(text,"%.0f",value);
					else
						sprintf(text,"%.1f",value);
				} else {
					strcpy(text,NULLMEDIUM); // 091221
				}
			} else {
				strcpy(text,NULLMEDIUM); // 091221
			}
			wsprintf(BufferValue, TEXT("%S"),text);
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetDistanceName()));
			_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			break;

		// B51
		case LK_AA_TARG_DIST:
			if ( (ValidTaskPoint(ActiveWayPoint) != false) && AATEnabled ) {
				index = Task[ActiveWayPoint].Index;
				if (index>=0) {
					value = DISTANCEMODIFY*CALCULATED_INFO.AATTargetDistance ;
					valid=true;
					if (value>99)
						sprintf(text,"%.0f",value);
					else
						sprintf(text,"%.1f",value);
				} else {
					strcpy(text,NULLMEDIUM); // 091221
				}
			} else {
				strcpy(text,NULLMEDIUM); // 091221
			}
			wsprintf(BufferValue, TEXT("%S"),text);
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetDistanceName()));
			_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			break;

		// B30
		case LK_AA_SPEEDMAX:
		// B31
		case LK_AA_SPEEDMIN:
			if ( (ValidTaskPoint(ActiveWayPoint) != false) && AATEnabled && CALCULATED_INFO.AATTimeToGo>=1 ) {
				index = Task[ActiveWayPoint].Index;
				if (index>=0) {
					if ( lkindex == LK_AA_SPEEDMAX )
						value = TASKSPEEDMODIFY*CALCULATED_INFO.AATMaxSpeed;
					else
						value = TASKSPEEDMODIFY*CALCULATED_INFO.AATMinSpeed;

					valid=true;
					sprintf(text,"%.0f",value);
				} else {
					strcpy(text,NULLMEDIUM);
				}
			} else {
				strcpy(text,NULLMEDIUM);
			}
			wsprintf(BufferValue, TEXT("%S"),text);
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetTaskSpeedName()));
			_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			break;

		// B52
		case LK_AA_TARG_SPEED:
			if ( (ValidTaskPoint(ActiveWayPoint) != false) && AATEnabled && CALCULATED_INFO.AATTimeToGo>=1 ) {
				index = Task[ActiveWayPoint].Index;
				if (index>=0) {
					value = TASKSPEEDMODIFY*CALCULATED_INFO.AATTargetSpeed;
					valid=true;
					sprintf(text,"%.0f",value);
				} else {
					strcpy(text,NULLMEDIUM);
				}
			} else {
				strcpy(text,NULLMEDIUM);
			}
			wsprintf(BufferValue, TEXT("%S"),text);
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetTaskSpeedName()));
			_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			break;

		// B72	WP REQ EFF
		case LK_NEXT_GR:
			wsprintf(BufferValue,_T(NULLLONG));
			if (lktitle)
				_stprintf(BufferTitle, TEXT("Req.E"));
			else
				_stprintf(BufferTitle, TEXT("Req.E"));
			if ( ValidTaskPoint(ActiveWayPoint) != false ) {
				index = Task[ActiveWayPoint].Index;
				if (index>=0) {
					value=WayPointCalc[index].GR;
					if (value <1 || value >=ALTERNATE_MAXVALIDGR )
						strcpy(text,NULLMEDIUM);
					else {
						if (value >= 100) sprintf(text,"%.0lf",value);
							else sprintf(text,"%.1lf",value);
						valid=true;
					}
					wsprintf(BufferValue, TEXT("%S"),text);
				}
			}
			break;

		// B71	LD AVR 
		case LK_LD_AVR:
			wsprintf(BufferValue,_T(NULLLONG));
			if (lktitle)
				_stprintf(BufferTitle, TEXT("E.Avg"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			if (DisplayMode != dmCircling) {
				value=CALCULATED_INFO.AverageLD;
				if (value <1 ||  value >=ALTERNATE_MAXVALIDGR ) {
					strcpy(text,INFINVAL); 
					valid=true;
				} else
					if (value==0)
						sprintf(text,NULLMEDIUM);
					else {
						if (value<100)
							sprintf(text,"%.1f",value);
						else
							sprintf(text,"%2.0f",value);
						valid=true;
					}
				wsprintf(BufferValue, TEXT("%S"),text);
			}
			break;

		// B12
		// Arrival altitude using current MC  and total energy. Does not use safetymc.
		// total energy is disabled!
		case LK_NEXT_ALTDIFF:
			wsprintf(BufferValue,_T(NULLLONG));
			if (lktitle)
				_stprintf(BufferTitle, TEXT("NxtArr"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			if ( ValidTaskPoint(ActiveWayPoint) != false ) {
				index = Task[ActiveWayPoint].Index;
				if (index>=0) {
					// don't use current MC...
					value=ALTITUDEMODIFY*WayPointCalc[index].AltArriv[AltArrivMode];
					if ( value > ALTDIFFLIMIT ) {
						valid=true;
						_stprintf(BufferValue,TEXT("%+1.0f"), value);
					}
				}
			}
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetAltitudeName()));
			break;

		// B13
		// Using MC! 
		case LK_NEXT_ALTREQ:
			wsprintf(BufferValue,_T(NULLLONG));
			if (lktitle)
				_stprintf(BufferTitle, TEXT("NexAltR"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			if ( ValidTaskPoint(ActiveWayPoint) != false ) {
				index = Task[ActiveWayPoint].Index;
				if (index>=0) {
					value=ALTITUDEMODIFY*WayPointCalc[index].AltReqd[AltArrivMode];
					if (value<10000 && value >-10000) {
						_stprintf(BufferValue,TEXT("%1.0f"), value);
						valid=true;
					} 
				}
			}
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetAltitudeName()));
			break;

		// B05
		case LK_LD_CRUISE:
			if (lktitle)
                       		_stprintf(BufferTitle, TEXT("E.Th"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			value=DerivedDrawInfo.CruiseLD;
			if (value <-99 ||  value >=ALTERNATE_MAXVALIDGR ) {
				strcpy(text,INFINVAL); 
				valid=true;
			} else
			if (value==0) sprintf(text,NULLMEDIUM);
			else {
				sprintf(text,"%.0f",value);
				valid=true;
			}
			wsprintf(BufferValue, TEXT("%S"),text);
			break;

		// B04
		case LK_LD_INST:
                        wsprintf(BufferValue,_T(NULLLONG));
			if (lktitle)
                        	_stprintf(BufferTitle, TEXT("E.20\""));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			value=CALCULATED_INFO.LD;
			if (value <-99 ||  value >=ALTERNATE_MAXVALIDGR ) {
				strcpy(text,INFINVAL);
				valid=true;
			} else
				if (value==0) sprintf(text,NULLMEDIUM);
				else {
					sprintf(text,"%.0f",value);
					valid=true;
				}
			wsprintf(BufferValue, TEXT("%S"),text);
			break;

		// B00
		case LK_HNAV:
			if (lktitle)
                        	_stprintf(BufferTitle, TEXT("Alt"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			value=ALTITUDEMODIFY*DerivedDrawInfo.NavAltitude;
			valid=true;
			sprintf(text,"%d",(int)value);
			wsprintf(BufferValue, TEXT("%S"),text);
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetAltitudeName()));
			break;

		// B01		AltAgl HAGL 100318
		case LK_HAGL:
			if (lktitle)
                        	_stprintf(BufferTitle, TEXT("HAGL"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );

			if (!CALCULATED_INFO.TerrainValid) { 
				wsprintf(BufferValue, TEXT(NULLLONG));
				wsprintf(BufferUnit, TEXT("%s"),(Units::GetAltitudeName()));
				valid=false;
				break;
			}
			value=ALTITUDEMODIFY*DerivedDrawInfo.AltitudeAGL;
			valid=true;
			sprintf(text,"%d",(int)value);
			wsprintf(BufferValue, TEXT("%S"),text);
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetAltitudeName()));
			break;

		// B33
		case LK_HBARO:
			if (GPS_INFO.BaroAltitudeAvailable) {
				value=ALTITUDEMODIFY*DrawInfo.BaroAltitude;
				valid=true;
				sprintf(text,"%d",(int)value);
				wsprintf(BufferValue, TEXT("%S"),text);
			} else
				wsprintf(BufferValue, TEXT(NULLLONG));
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetAltitudeName()));
			_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			break;

		// B86
		case LK_HGPS:
			if (lktitle)
                        	_stprintf(BufferTitle, TEXT("HGPS"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			if (GPS_INFO.NAVWarning || (GPS_INFO.SatellitesUsed == 0)) {
				wsprintf(BufferValue, TEXT(NULLLONG));
				valid=false;
			} else {
				value=ALTITUDEMODIFY*GPS_INFO.Altitude;
				valid=true;
				sprintf(text,"%d",(int)value);
				wsprintf(BufferValue, TEXT("%S"),text);
				wsprintf(BufferUnit, TEXT("%s"),(Units::GetAltitudeName()));
			}
			break;

		// B70
		case LK_QFE:
			value=ALTITUDEMODIFY*DerivedDrawInfo.NavAltitude-QFEAltitudeOffset;;
			valid=true;
			sprintf(text,"%d",(int)value);
			wsprintf(BufferValue, TEXT("%S"),text);
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetAltitudeName()));
			_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			break;

		// B20
		case LK_HGND:
                        wsprintf(BufferValue,_T(NULLLONG));
			if (DerivedDrawInfo.TerrainValid) {
				value=ALTITUDEMODIFY*DerivedDrawInfo.TerrainAlt;
				valid=true;
				sprintf(text,"%d",(int)value);
				wsprintf(BufferValue, TEXT("%S"),text);
			}
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetAltitudeName()));
			if (lktitle)
				wsprintf(BufferTitle, TEXT("Gnd"),text);
			else 
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			break;

		// B23
		case LK_TRACK:
			wsprintf(BufferValue,_T(NULLLONG));
			//_stprintf(BufferUnit,TEXT(""));
			if (lktitle)
				_stprintf(BufferTitle, TEXT("Trk"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			value = GPS_INFO.TrackBearing;
			valid=true;
#ifndef __MINGW32__
			if (value > 1)
				_stprintf(BufferValue, TEXT("%2.0f°"), value);
			else if (value < -1)
				_stprintf(BufferValue, TEXT("%2.0f°"), -value);
				else
					_tcscpy(BufferValue, TEXT("0°"));
#else
			if (value > 1)
				_stprintf(BufferValue, TEXT("%2.0fÂ°"), value);
			else if (value < -1)
				_stprintf(BufferValue, TEXT("%2.0fÂ°"), -value);
				else
					_tcscpy(BufferValue, TEXT("0Â°"));
#endif
			break;


		// B06
		case LK_GNDSPEED:
			value=SPEEDMODIFY*DrawInfo.Speed;
			valid=true;
			if (value<0||value>9999) value=0; else valid=true;
			sprintf(text,"%d",(int)value);
			wsprintf(BufferValue, TEXT("%S"),text);
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetHorizontalSpeedName()));
			if (lktitle)
				wsprintf(BufferTitle, TEXT("GS"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			break;


		// B32
		case LK_IAS:
			if (GPS_INFO.AirspeedAvailable) {
				if (lktitle)
					wsprintf(BufferTitle, TEXT("IAS"));
				else
					_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
				value=SPEEDMODIFY*DrawInfo.IndicatedAirspeed;
				if (value<0||value>999) value=0; else valid=true;
				sprintf(text,"%d",(int)value);
				wsprintf(BufferValue, TEXT("%S"),text);
			} else {
				wsprintf(BufferTitle, TEXT("eIAS"));
				value=SPEEDMODIFY*DerivedDrawInfo.IndicatedAirspeedEstimated;
				if (value<0||value>999) value=0; else valid=true;
				sprintf(text,"%d",(int)value);
				wsprintf(BufferValue, TEXT("%S"),text);
			}
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetHorizontalSpeedName()));
			break;
				
		// B43 AKA STF
		case LK_SPEED_DOLPHIN:
			// if (GPS_INFO.AirspeedAvailable) {
				value=SPEEDMODIFY*DerivedDrawInfo.VOpt;
				if (value<0||value>999) value=0; else valid=true;
				sprintf(text,"%d",(int)value);
				wsprintf(BufferValue, TEXT("%S"),text);
			// } else
			//	wsprintf(BufferValue, TEXT(NULLMEDIUM));
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetHorizontalSpeedName()));
			_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			break;

		// B87  100908
		case LK_EQMC:
			wsprintf(BufferTitle, TEXT("eqMC"));
			if ( CALCULATED_INFO.Circling == TRUE || CALCULATED_INFO.EqMc<0 || CALCULATED_INFO.OnGround == TRUE) {
				wsprintf(BufferValue, TEXT(NULLMEDIUM));
			} else {
				value = iround(LIFTMODIFY*CALCULATED_INFO.EqMc*10)/10.0;
				valid=true;
				sprintf(text,"%2.1lf",value);
				wsprintf(BufferValue, TEXT("%S"),text);
			}
			break;
				
		// B44
		case LK_NETTO:
			value=LIFTMODIFY*DerivedDrawInfo.NettoVario;
			if (value<-100||value>100) value=0; else valid=true;
			_stprintf(BufferValue,varformat,value);
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetVerticalSpeedName()));
			_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			break;


		// B54 091221
		case LK_TAS:
			if (GPS_INFO.AirspeedAvailable) {
				if (lktitle)
					wsprintf(BufferTitle, TEXT("TAS"));
				else
					_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
				value=SPEEDMODIFY*DrawInfo.TrueAirspeed;
				if (value<0||value>999) {
					sprintf(text,"%s",NULLMEDIUM);
				} else {
					valid=true;
					sprintf(text,"%d",(int)value);
				}
				wsprintf(BufferValue, TEXT("%S"),text);
			} else {
				wsprintf(BufferTitle, TEXT("eTAS"));
				value=SPEEDMODIFY*DerivedDrawInfo.TrueAirspeedEstimated;
				if (value<0||value>999) {
					sprintf(text,"%s",NULLMEDIUM);
				} else {
					valid=true;
					sprintf(text,"%d",(int)value);
				}
				wsprintf(BufferValue, TEXT("%S"),text);
			}
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetHorizontalSpeedName()));
			break;

		// B55  Team Code 091216
		case LK_TEAM_CODE:
			if(ValidWayPoint(TeamCodeRefWaypoint)) {
				_tcsncpy(BufferValue,CALCULATED_INFO.OwnTeamCode,5);
				BufferValue[5] = '\0';
				valid=true; // 091221
			} else
				wsprintf(BufferValue,_T("----"));
			if (lktitle)
				wsprintf(BufferTitle, TEXT("TmCode"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			break;

		// B56  Team Code 091216
		case LK_TEAM_BRG:
			wsprintf(BufferValue,_T(NULLLONG));
			if (lktitle)
				_stprintf(BufferTitle, TEXT("TmBrg"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );

			if(ValidWayPoint(TeamCodeRefWaypoint) && TeammateCodeValid) {
				value=CALCULATED_INFO.TeammateBearing;
				valid=true;
				if (value > 1)
					_stprintf(BufferValue, TEXT("%2.0fÂ°"), value);
				else if (value < -1)
					_stprintf(BufferValue, TEXT("%2.0fÂ°"), -value);
				else
					_tcscpy(BufferValue, TEXT("0Â°"));
			}
			break;

		// B57 Team Bearing Difference 091216
		case LK_TEAM_BRGDIFF:
			wsprintf(BufferValue,_T(NULLLONG));

			if (lktitle)
				_stprintf(BufferTitle, TEXT("TmBd"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );

			if (ValidWayPoint(TeamCodeRefWaypoint) && TeammateCodeValid) {
				value = CALCULATED_INFO.TeammateBearing -  GPS_INFO.TrackBearing;
				valid=true; // 091221
				if (value < -180.0)
					value += 360.0;
				else
					if (value > 180.0) value -= 360.0;

				if (value > 1)
					_stprintf(BufferValue, TEXT("%2.0fÂ°Â»"), value);
				else if (value < -1)
					_stprintf(BufferValue, TEXT("Â«%2.0fÂ°"), -value);
					else
						_tcscpy(BufferValue, TEXT("Â«Â»"));
			}
			break;

		// B58 091216 Team Range Distance
		case LK_TEAM_DIST:
			if ( TeammateCodeValid ) {
				value=DISTANCEMODIFY*CALCULATED_INFO.TeammateRange;
				valid=true;
				if (value>99)
					sprintf(text,"%.0f",value);
				else
					sprintf(text,"%.1f",value);
			} else {
				strcpy(text,NULLLONG);
			}

			wsprintf(BufferValue, TEXT("%S"),text);
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetDistanceName()));
			if (lktitle)
				_tcscpy(BufferTitle, _T("TmDis"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			break;

		// B34
		case LK_SPEED_MC:
			value=SPEEDMODIFY*DerivedDrawInfo.VMacCready;
			valid=true;
			if (value<=0||value>999) value=0; else valid=true;
			sprintf(text,"%d",(int)value);
			wsprintf(BufferValue, TEXT("%S"),text);
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetHorizontalSpeedName()));
			if (lktitle)
				wsprintf(BufferTitle, TEXT("SpMC"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			break;


		// B35
		case LK_PRCCLIMB:
			value=DerivedDrawInfo.PercentCircling;
			valid=true;
			sprintf(text,"%d",(int)value);
			wsprintf(BufferValue, TEXT("%S"),text);
			wsprintf(BufferUnit, TEXT("%%"));
			_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			break;


		// B73
		case LK_FL:
			if (lktitle)
				_stprintf(BufferTitle, TEXT("FL"));
			else
				_stprintf(BufferTitle, TEXT("FL"));
			value=(TOFEET*DerivedDrawInfo.NavAltitude)/100.0;
			valid=true;
			sprintf(text,"%d",(int)value);
			wsprintf(BufferValue, TEXT("%S"),text);
			//_stprintf(BufferUnit,TEXT(""));
			break;

		// B131
		case LK_WIND:
			_stprintf(BufferTitle, TEXT("Wind"));
			if (DerivedDrawInfo.WindSpeed*SPEEDMODIFY>=1) {
				value = DerivedDrawInfo.WindBearing;
				valid=true;
				if (value==360) value=0;
				_stprintf(BufferValue,TEXT("%1.0f")_T(DEG)_T("/%1.0f"), value, SPEEDMODIFY*DerivedDrawInfo.WindSpeed );
			} else {
				_stprintf(BufferValue,TEXT("--/--"));
			}
			break;

		// B25
		case LK_WIND_SPEED:
			_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			wsprintf(BufferUnit, TEXT("%s"),Units::GetHorizontalSpeedName());
			
			value=DerivedDrawInfo.WindSpeed*SPEEDMODIFY;
			if (value>=1 ) {
				_stprintf(BufferValue,TEXT("%1.0f"), value );
				valid=true;
			} else {
				_stprintf(BufferValue,TEXT(NULLMEDIUM)); // 091221
			}
			break;

		// B26
		case LK_WIND_BRG:
			_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			if (DerivedDrawInfo.WindSpeed*SPEEDMODIFY>=1) {
				value = DerivedDrawInfo.WindBearing;
				valid=true;
				if (value==360) value=0;
				_stprintf(BufferValue,TEXT("%1.0f")_T(DEG), value );
			} else {
				_stprintf(BufferValue,TEXT(NULLMEDIUM));
			}
			
			break;

		// B07  091221
		case LK_TL_AVG:
			value= LIFTMODIFY*CALCULATED_INFO.LastThermalAverage;
			if (value==0)
				sprintf(text,NULLMEDIUM);
			else { 
				valid=true;
				if (value<20) sprintf(text,"%+.1lf",value);
					else sprintf(text,"%+.0lf",value);
			}
			wsprintf(BufferValue, TEXT("%S"),text);
			wsprintf(BufferUnit, TEXT("%s"),Units::GetVerticalSpeedName());
			if (lktitle)
				wsprintf(BufferTitle, TEXT("TL.Avg"),text);
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			break;

		// B08 091216 091221
		case LK_TL_GAIN:
			value=ALTITUDEMODIFY*DerivedDrawInfo.LastThermalGain;
			if (value==0)
				sprintf(text,NULLMEDIUM);
			else { 
				valid=true;
				sprintf(text,"%+d",(int)value);
			}
			wsprintf(BufferValue, TEXT("%S"),text);
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetAltitudeName()));
			if (lktitle)
				wsprintf(BufferTitle, TEXT("TL.Gain"),text);
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			break;

		// B21 091221
		case LK_TC_AVG:
			value= LIFTMODIFY*CALCULATED_INFO.AverageThermal;
			if (value==0)
				sprintf(text,NULLMEDIUM);
			else { 
				if (value<20) sprintf(text,"%+.1lf",value);
				else sprintf(text,"%+.0lf",value);
				valid=true; 
			}
			wsprintf(BufferValue, TEXT("%S"),text);
			wsprintf(BufferUnit, TEXT("%s"),Units::GetVerticalSpeedName());
			if (lktitle)
				wsprintf(BufferTitle, TEXT("TC.Avg"),text);
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			break;

		// B10
		case LK_MC:
			value = iround(LIFTMODIFY*MACCREADY*10)/10.0;
			valid=true;
			//sprintf(text,"%.1lf",value);
			sprintf(text,"%2.1lf",value);
			wsprintf(BufferValue, TEXT("%S"),text);
			//if (!ValidTaskPoint(ActiveWayPoint) && ((AutoMcMode==0) || (AutoMcMode==2))) {
			if (!CALCULATED_INFO.AutoMacCready) {
				if (lktitle)
					wsprintf(BufferTitle, TEXT("ManMC"));
				else
					_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			} else {
				if (lktitle)
					wsprintf(BufferTitle, TEXT("AutMC"));
				else
					_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			}

			break;

		// B2 091221
		case LK_TC_30S:
			value=LIFTMODIFY*DerivedDrawInfo.Average30s;
			if (value==0)
				sprintf(text,NULLMEDIUM);
			else { 
				valid=true;
				if (value<20) sprintf(text,"%+.1lf",value);
					else sprintf(text,"%+.0lf",value);
			}
			wsprintf(BufferValue, TEXT("%S"),text);
			wsprintf(BufferUnit, TEXT("%s"),Units::GetVerticalSpeedName());
			if (lktitle)
				wsprintf(BufferTitle, TEXT("TC.30\""));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			break;

		// B22 091221
		case LK_TC_GAIN:
			value=ALTITUDEMODIFY*DerivedDrawInfo.ThermalGain;
			if (value==0)
				sprintf(text,NULLMEDIUM);
			else { 
				valid=true;
				sprintf(text,"%+d",(int)value);
			}
			wsprintf(BufferValue, TEXT("%S"),text);
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetAltitudeName()));
			if (lktitle)
				wsprintf(BufferTitle, TEXT("TC.Gain"),text);
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			break;

		// B63 091221
		case LK_TC_ALL:
			if (CALCULATED_INFO.timeCircling <=0)
				//value=0.0;
				sprintf(text,NULLMEDIUM);
			else {
				value = LIFTMODIFY*CALCULATED_INFO.TotalHeightClimb /CALCULATED_INFO.timeCircling;
				if (value<20)
					sprintf(text,"%+.1lf",value);
				else
					sprintf(text,"%+.0lf",value);
				valid=true;
			}
			wsprintf(BufferValue, TEXT("%S"),text);
			wsprintf(BufferUnit, TEXT("%s"),Units::GetVerticalSpeedName());
			if (lktitle)
				wsprintf(BufferTitle, TEXT("Th.All"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
                	break;

		// B24
		case LK_VARIO:
			if (GPS_INFO.VarioAvailable) {
				value = LIFTMODIFY*GPS_INFO.Vario;
			} else {
				value = LIFTMODIFY*CALCULATED_INFO.Vario;
			}
			valid=true;
			_stprintf(BufferValue,varformat,value);
			wsprintf(BufferUnit, TEXT("%s"),Units::GetVerticalSpeedName());
			if (lktitle)
				wsprintf(BufferTitle, TEXT("Vario"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			break;

		// B15 Arrival altitude , no more total energy
		case LK_FIN_ALTDIFF:
			wsprintf(BufferValue,_T(NULLLONG));
			if (lktitle)
				_stprintf(BufferTitle, TEXT("TskArr"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			if ( ValidTaskPoint(ActiveWayPoint) != false ) {
				index = Task[ActiveWayPoint].Index;
				if (index>=0) {
					value=ALTITUDEMODIFY*DerivedDrawInfo.TaskAltitudeDifference;
					if ( value > ALTDIFFLIMIT ) {
						valid=true;
						_stprintf(BufferValue,TEXT("%+1.0f"), value);
					}
				}
			}
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetAltitudeName()));
			break;

		// B16
		case LK_FIN_ALTREQ:
			wsprintf(BufferValue,_T(NULLLONG));
			if (lktitle)
				_stprintf(BufferTitle, TEXT("TskAltR"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			if ( ValidTaskPoint(ActiveWayPoint) != false ) {
				index = Task[ActiveWayPoint].Index;
				if (index>=0) {
					value=ALTITUDEMODIFY*DerivedDrawInfo.TaskAltitudeRequired;
					if (value<10000 && value >-10000) {
						_stprintf(BufferValue,TEXT("%1.0f"), value);
						valid=true;
					} 
				}
			}
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetAltitudeName()));
			break;

		// B18
		case LK_FIN_DIST:
			if ( ValidTaskPoint(ActiveWayPoint) != false ) {
				index = Task[ActiveWayPoint].Index;
				if (index>=0) {
					if (CALCULATED_INFO.ValidFinish) {
						value = DISTANCEMODIFY*CALCULATED_INFO.WaypointDistance;
					} else {
						value = DISTANCEMODIFY*CALCULATED_INFO.TaskDistanceToGo;
					}
					valid=true;
					if (value>99)
						sprintf(text,"%.0f",value);
					else
						sprintf(text,"%.1f",value);
				} else {
					strcpy(text,NULLLONG);
				}
			} else {
				strcpy(text,NULLLONG);
			}
			wsprintf(BufferValue, TEXT("%S"),text);
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetDistanceName()));
			if (lktitle)
				_tcscpy(BufferTitle, _T("TskDis"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			break;

		// B74
		case LK_TASK_DISTCOV:
			if ( (ActiveWayPoint >=1) && ( ValidTaskPoint(ActiveWayPoint) )) {
				value = DISTANCEMODIFY*CALCULATED_INFO.TaskDistanceCovered;
				valid=true;
				sprintf(text,"%.0f",value); // l o f?? TODO CHECK
			} else {
				strcpy(text,NULLLONG);
			}
			wsprintf(BufferValue, TEXT("%S"),text);
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetDistanceName()));
			if (lktitle)
				wsprintf(BufferTitle, TEXT("TskCov"),text);
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			break;

		// B79
		case LK_AIRSPACEDIST:
			if (lktitle)
				wsprintf(BufferTitle, TEXT("Arspace"),text);
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );

			if (NearestAirspaceHDist >0) {
				value = DISTANCEMODIFY*NearestAirspaceHDist;
				sprintf(text,"%1.1f",value);
				wsprintf(BufferValue, TEXT("%S"),text);
				valid = true;
			} else {
				valid=false;
				wsprintf(BufferValue, TEXT(NULLMEDIUM),text);
				value = -1;
			}
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetDistanceName()));
			break;

		// B66
		case LK_FIN_GR:
			wsprintf(BufferValue,_T(NULLLONG));
			if (lktitle)
				_stprintf(BufferTitle, TEXT("TskReqE"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			if ( ValidTaskPoint(ActiveWayPoint) != false ) {
				index = Task[ActiveWayPoint].Index;
				if (index>=0) {
					// the ValidFinish() seem to return FALSE when is actually valid.
					// In any case we do not use it for the vanilla GR
					value = CALCULATED_INFO.GRFinish;
					if (value <1 || value >=ALTERNATE_MAXVALIDGR )
						strcpy(text,NULLMEDIUM);
					else {
						if (value >= 100) sprintf(text,"%.0lf",value);
							else sprintf(text,"%.1lf",value);
						valid=true;
					}
					wsprintf(BufferValue, TEXT("%S"),text);
				}
			}
			break;


		// B19
		case LK_FIN_LD:
			wsprintf(BufferValue,_T(NULLLONG));
			//_stprintf(BufferUnit,TEXT(""));
			if (lktitle)
				_stprintf(BufferTitle, TEXT("OLDfLD"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			if ( ValidTaskPoint(ActiveWayPoint) != false ) {
				index = Task[ActiveWayPoint].Index;
				if (index>=0) {
					if (CALCULATED_INFO.ValidFinish) {
						value = 0;
					} else {
						value = CALCULATED_INFO.LDFinish;
					}
					if (value <1 || value >=ALTERNATE_MAXVALIDGR )
						strcpy(text,NULLMEDIUM);
					else {
						valid=true;
						if (value >= 100) sprintf(text,"%.0lf",value);
							else sprintf(text,"%.1lf",value);
					}
					wsprintf(BufferValue, TEXT("%S"),text);
				}
			}
			break;

		// B38
		case LK_NEXT_LD:
			wsprintf(BufferValue,_T(NULLMEDIUM)); // 091221
			if (lktitle)
				_stprintf(BufferTitle, TEXT("OLDNexLD"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			if ( ValidTaskPoint(ActiveWayPoint) != false ) {
				index = Task[ActiveWayPoint].Index;
				if (index>=0) {
					value = CALCULATED_INFO.LDNext;
					if (value <1 || value >=ALTERNATE_MAXVALIDGR )
						strcpy(text,NULLMEDIUM);
					else {
						valid=true;
						if (value >= 100) sprintf(text,"%.0lf",value);
							else sprintf(text,"%.1lf",value);
					}
					wsprintf(BufferValue, TEXT("%S"),text);
				}
			}
			break;

		// B53
		case LK_LD_VARIO:
			wsprintf(BufferValue,_T(NULLMEDIUM));
			//_stprintf(BufferUnit,TEXT(""));
			_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			if (GPS_INFO.AirspeedAvailable && GPS_INFO.VarioAvailable) {
				value = CALCULATED_INFO.LDvario;
				if (value <1 || value >=ALTERNATE_MAXVALIDGR )
					strcpy(text,NULLMEDIUM);
				else {
					valid=true;
					if (value >= 100) sprintf(text,"%.0lf",value);
						else sprintf(text,"%.1lf",value);
				}
				wsprintf(BufferValue, TEXT("%S"),text);
			}
			break;

		// B64
		case LK_VARIO_DIST:
			wsprintf(BufferValue,_T(NULLMEDIUM));
			if ( ActiveWayPoint >=1) {
				if ( ValidTaskPoint(ActiveWayPoint) ) {
					value = LIFTMODIFY*CALCULATED_INFO.DistanceVario;
					_stprintf(BufferValue,varformat,value);
					valid=true;
				}
			}
			_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			wsprintf(BufferUnit, TEXT("%s"),Units::GetVerticalSpeedName());
			break;


		// B59
		case LK_SPEEDTASK_INST:
			wsprintf(BufferValue,_T(NULLLONG));
			if (lktitle)
				_stprintf(BufferTitle, TEXT("TskSpI"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			value=0;
			if ( ActiveWayPoint >=1) {
				if ( ValidTaskPoint(ActiveWayPoint) ) {
					value = TASKSPEEDMODIFY*CALCULATED_INFO.TaskSpeedInstantaneous;
					if (value<=0||value>999) value=0; else valid=true;
					sprintf(text,"%d",(int)value);
					wsprintf(BufferValue, TEXT("%S"),text);
				}
			}
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetTaskSpeedName()));
			break;

		// B61
		case LK_SPEEDTASK_ACH:
			wsprintf(BufferValue,_T(NULLLONG));
			if (lktitle)
				_stprintf(BufferTitle, TEXT("TskSp"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			value=0;
			if ( ActiveWayPoint >=1) {
				if ( ValidTaskPoint(ActiveWayPoint) ) {
					value = TASKSPEEDMODIFY*CALCULATED_INFO.TaskSpeedAchieved;
					if (value<0||value>999) value=0; else valid=true;
					sprintf(text,"%d",(int)value);
					wsprintf(BufferValue, TEXT("%S"),text);
				}
			}
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetTaskSpeedName()));
			break;

		// B17
		case LK_SPEEDTASK_AVG:
			wsprintf(BufferValue,_T(NULLLONG));
			if (lktitle)
				_stprintf(BufferTitle, TEXT("TskSpAv"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			value=0;
			if ( ActiveWayPoint >=1) {
				if ( ValidTaskPoint(ActiveWayPoint) ) {
					value = TASKSPEEDMODIFY*CALCULATED_INFO.TaskSpeed;
					if (value<=0||value>999) value=0; else valid=true;
					sprintf(text,"%d",(int)value);
					wsprintf(BufferValue, TEXT("%S"),text);
				}
			}
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetTaskSpeedName()));
			break;


		// B132 Final arrival with MC 0 , no totaly energy.
		case LK_FIN_ALTDIFF0:
			wsprintf(BufferValue,_T(NULLLONG));
			if (lktitle)
				_stprintf(BufferTitle, TEXT("TskArr0"));
			else
				_stprintf(BufferTitle, TEXT("TskArrMc0"));
			if ( ValidTaskPoint(ActiveWayPoint) != false ) {
				index = Task[ActiveWayPoint].Index;
				if (index>=0) {
					value=ALTITUDEMODIFY*DerivedDrawInfo.TaskAltitudeDifference0;
					if ( value > ALTDIFFLIMIT ) {
						valid=true;
						_stprintf(BufferValue,TEXT("%+1.0f"), value);
					}
				}
			}
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetAltitudeName()));
			break;

		// B41	091006 using new task ete 
		case LK_FIN_ETE:
		// B133  091222 using old ETE corrected now
		case LK_LKFIN_ETE:
			wsprintf(BufferValue,_T(NULLTIME)); // 091222
			if (lktitle)
				_stprintf(BufferTitle, TEXT("TskETE"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[LK_FIN_ETE].Title );

			if ( ValidTaskPoint(ActiveWayPoint) ) { // 091222
				if (CALCULATED_INFO.LKTaskETE > 0) { 
					valid=true;
					if ( Units::TimeToTextDown(BufferValue, (int)CALCULATED_INFO.LKTaskETE))  // 091112
						wsprintf(BufferUnit, TEXT("h"));
					else
						wsprintf(BufferUnit, TEXT("m"));
				} else {
					index = Task[ActiveWayPoint].Index;
					if ( (WayPointCalc[index].NextETE > 0) && !ValidTaskPoint(1) ) {
						valid=true;
						if (Units::TimeToTextDown(BufferValue, (int)WayPointCalc[index].NextETE))
                                                	wsprintf(BufferUnit, TEXT("h"));
                                        	else
                                        	        wsprintf(BufferUnit, TEXT("m"));
					} else
						wsprintf(BufferValue, TEXT(NULLTIME));
				}
			}
			// wsprintf(BufferUnit, TEXT("h")); 091112 REMOVE
			break;

		// B42
		case LK_NEXT_ETE:
			wsprintf(BufferValue,_T(NULLLONG));
			if (lktitle)
				_stprintf(BufferTitle, TEXT("NexETE"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );

			index = Task[ActiveWayPoint].Index;
			if ( (ValidTaskPoint(ActiveWayPoint) != false) && (WayPointCalc[index].NextETE < 0.9*ERROR_TIME)) {

				if (WayPointCalc[index].NextETE > 0) {
					valid=true;
					if (Units::TimeToTextDown(BufferValue, (int)WayPointCalc[index].NextETE)) // 091112
						wsprintf(BufferUnit, TEXT("h"));
					else
						wsprintf(BufferUnit, TEXT("m"));
				} else
					wsprintf(BufferValue, TEXT(NULLTIME));
			}
			// wsprintf(BufferUnit, TEXT("h")); 091112
			break;


		// B45
		case LK_FIN_ETA:
			wsprintf(BufferValue,_T(NULLLONG));
			if (lktitle)
				_stprintf(BufferTitle, TEXT("TskETA"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );

			if ( (ValidTaskPoint(ActiveWayPoint) != false) && (CALCULATED_INFO.TaskTimeToGo< 0.9*ERROR_TIME)) {
				if (CALCULATED_INFO.TaskTimeToGo > 0) {
					valid=true;
					Units::TimeToText(BufferValue, (int)CALCULATED_INFO.TaskTimeToGo+DetectCurrentTime());
				} else
					wsprintf(BufferValue, TEXT(NULLTIME));
			}
			wsprintf(BufferUnit, TEXT("h"));
			break;


		// B46
		case LK_NEXT_ETA:
			wsprintf(BufferValue,_T(NULLLONG));
			if (lktitle)
				_stprintf(BufferTitle, TEXT("NexETA"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );

			if ( (ValidTaskPoint(ActiveWayPoint) != false) && (CALCULATED_INFO.LegTimeToGo< 0.9*ERROR_TIME)) {
				if (CALCULATED_INFO.LegTimeToGo > 0) {
					valid=true;
					Units::TimeToText(BufferValue, (int)CALCULATED_INFO.LegTimeToGo+DetectCurrentTime());
				} else
					wsprintf(BufferValue, TEXT(NULLTIME));
			}
			wsprintf(BufferUnit, TEXT("h"));
			break;


		// B36		TmFly
		case LK_TIMEFLIGHT:
			wsprintf(BufferValue,_T(NULLTIME));
			if (lktitle)
				_stprintf(BufferTitle, TEXT("FlyTm"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );

			if (CALCULATED_INFO.FlightTime > 0) {
				valid=true;
				Units::TimeToText(BufferValue, (int)CALCULATED_INFO.FlightTime);
			} else {
				wsprintf(BufferValue, TEXT(NULLTIME));
			}
			wsprintf(BufferUnit, TEXT("h"));
			break;

		// B09		Last thermal time
		case LK_TL_TIME:
			wsprintf(BufferValue,_T(NULLTIME));
			if (lktitle)
				_stprintf(BufferTitle, TEXT("TL.Time"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );

			if (CALCULATED_INFO.LastThermalTime > 0) {
				valid=true;
				Units::TimeToText(BufferValue, (int)CALCULATED_INFO.LastThermalTime);
			} else {
				wsprintf(BufferValue, TEXT(NULLTIME));
			}
			wsprintf(BufferUnit, TEXT("h"));
			break;


		// B27
		case LK_AA_TIME:
			wsprintf(BufferValue,_T(NULLTIME));
			_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );

#if (0)
			double dd;
			if (AATEnabled && ValidTaskPoint(ActiveWayPoint)) {
				dd = CALCULATED_INFO.TaskTimeToGo;
				if ((CALCULATED_INFO.TaskStartTime>0.0) && (CALCULATED_INFO.Flying) &&(ActiveWayPoint>0)) {
					dd += GPS_INFO.Time-CALCULATED_INFO.TaskStartTime;
				}
				dd= max(0,min(24.0*3600.0,dd))-AATTaskLength*60;
				if (dd<0) {
					status = 1; // red
				} else {
					if (CALCULATED_INFO.TaskTimeToGoTurningNow > (AATTaskLength+5)*60) {
						status = 2; // blue
					} else {
						status = 0;  // black
					}
				}
			} else {
				dd = 0;
				status = 0; // black
			}
#endif
			if (ValidTaskPoint(ActiveWayPoint) && AATEnabled && (CALCULATED_INFO.AATTimeToGo< 0.9*ERROR_TIME)) {

				Units::TimeToText(BufferValue, (int)CALCULATED_INFO.AATTimeToGo);
				valid=true;
			}
			wsprintf(BufferUnit,_T("h"));
			break;

		// B37
		case LK_GLOAD:
			//wsprintf(BufferValue,_T(NULLMEDIUM)); 100302 obs
			//wsprintf(BufferUnit,_T("g")); 100302 obs
			// _stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title ); 100302 obs
			if ( GPS_INFO.AccelerationAvailable) { 
				value=GPS_INFO.Gload;
				_stprintf(BufferValue,TEXT("%+.1f"), value);
				valid=true;
				_tcscpy(BufferTitle,_T("G"));
			} else {
				value=CALCULATED_INFO.Gload;
				_stprintf(BufferValue,TEXT("%+.1f"), value);
				valid=true;
				_tcscpy(BufferTitle,_T("eG"));
			}
			break;

		// B65 FIXED 100125
		case LK_BATTERY:
			wsprintf(BufferValue,_T(NULLMEDIUM));
			_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );

#if (WINDOWSPC<1)
	#ifndef GNAV
			value = PDABatteryPercent;
                	if (value<1||value>100)
				_stprintf(BufferValue,_T("---"));
                	else {
				if (PDABatteryFlag==BATTERY_FLAG_CHARGING || PDABatteryStatus==AC_LINE_ONLINE) {
					_stprintf(BufferValue,TEXT("%2.0f%%C"), value);	 // 100228
				} else {
					_stprintf(BufferValue,TEXT("%2.0f%%D"), value);  // 100228
				}

				valid = true;
			}
	#else
			value = GPS_INFO.SupplyBatteryVoltage;
			if (value>0.0) {
				_stprintf(BufferValue,TEXT("%2.1fV"), value);
				valid = true;
			} else {
				valid = false;
			}
	#endif
#endif
			break;


		// B62
		case LK_AA_DELTATIME:
			wsprintf(BufferValue,_T(NULLTIME));
			_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			wsprintf(BufferUnit,_T("h"));
			// TODO This is in the wrong place, should be moved to calc thread! 090916
			double dd;
			if (AATEnabled && ValidTaskPoint(ActiveWayPoint)) {
				dd = CALCULATED_INFO.TaskTimeToGo;
				if ((CALCULATED_INFO.TaskStartTime>0.0) && (CALCULATED_INFO.Flying) &&(ActiveWayPoint>0)) {
					dd += GPS_INFO.Time-CALCULATED_INFO.TaskStartTime;
				}
				dd= max(0,min(24.0*3600.0,dd))-AATTaskLength*60;
#if (0)
				if (dd<0) {
					status = 1; // red
				} else {
					if (CALCULATED_INFO.TaskTimeToGoTurningNow > (AATTaskLength+5)*60) {
						status = 2; // blue
					} else {
						status = 0;  // black
					}
				}
#endif
				if (dd < (0.9*ERROR_TIME)) {
					valid=true;
					Units::TimeToText(BufferValue, (int)dd);
				}
			}
			break;

#if 0
		// B133  091222 using old ETE corrected now
		case LK_LKFIN_ETE:
			wsprintf(BufferValue,_T(NULLLONG));
			if (lktitle)
				_stprintf(BufferTitle, TEXT("TskETE"));
			else
				_stprintf(BufferTitle, TEXT("TskETE"));

			if ( (ValidTaskPoint(ActiveWayPoint) != false) && (CALCULATED_INFO.LKTaskETE< 0.9*ERROR_TIME)) {
				if (CALCULATED_INFO.LKTaskETE > 0) {
					Units::TimeToText(BufferValue, (int)CALCULATED_INFO.LKTaskETE);
					valid=true;
				} else
					wsprintf(BufferValue, TEXT(NULLTIME));
			}
			wsprintf(BufferUnit, TEXT("h"));
			break;
#endif


		// B134
		// Using MC=0!  total energy disabled
		case LK_NEXT_ALTDIFF0:
			wsprintf(BufferValue,_T(NULLLONG));
			if (lktitle)
				_stprintf(BufferTitle, TEXT("ArrMc0"));
			else
				_stprintf(BufferTitle, TEXT("ArrMc0"));
			if ( ValidTaskPoint(ActiveWayPoint) != false ) {
				index = Task[ActiveWayPoint].Index;
				if (index>=0) {
					value=ALTITUDEMODIFY*DerivedDrawInfo.NextAltitudeDifference0;
					if ( value > ALTDIFFLIMIT ) {
						valid=true;
						_stprintf(BufferValue,TEXT("%+1.0f"), value);
					}
				}
			}
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetAltitudeName()));
			break;

		// B67
		case LK_ALTERN1_GR:
		// B68
		case LK_ALTERN2_GR:
		// B69
		case LK_BESTALTERN_GR:
			wsprintf(BufferValue,_T(NULLMEDIUM));
			if (lktitle)
				_stprintf(BufferTitle, TEXT("Atn%d.E"), lkindex-LK_ALTERNATESGR+1);
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			switch(lkindex) {
				case LK_ALTERN1_GR:
					index=Alternate1;
					break;
				case LK_ALTERN2_GR:
					index=Alternate2;
					break;
				case LK_BESTALTERN_GR:
					index=BestAlternate;
					break;
				default:
					index=0;
					break;
			}

			if(ValidWayPoint(index))
			{
				if ( DisplayTextType == DISPLAYFIRSTTHREE)
				{
					 _tcsncpy(BufferTitle,WayPointList[index].Name,3);
					BufferTitle[3] = '\0';
				}
				else if( DisplayTextType == DISPLAYNUMBER) {
					_stprintf(BufferTitle,TEXT("%d"), WayPointList[index].Number );
				} else {
					_tcsncpy(BufferTitle,WayPointList[index].Name, 12);
					// BufferTitle[(sizeof(Text)/sizeof(TCHAR))-1] = '\0';
					if (lktitle)
						BufferTitle[12] = '\0'; // FIX TUNING
					else
						BufferTitle[8] = '\0';  // FIX TUNING
				}
			}
			// it would be time to use Alternate[] ..
			switch (lkindex) {
				case LK_ALTERN1_GR:
					if ( ValidWayPoint(Alternate1) ) value=WayPointCalc[Alternate1].GR;
					else value=INVALID_GR;
					break;
				case LK_ALTERN2_GR:
					if ( ValidWayPoint(Alternate2) ) value=WayPointCalc[Alternate2].GR;
					else value=INVALID_GR;
					break;
				case LK_BESTALTERN_GR:
					if ( ValidWayPoint(BestAlternate) ) value=WayPointCalc[BestAlternate].GR;
					else value=INVALID_GR;
					break;
				default:
					value = 1;
					break;
			}
			if (value <1 || value >=ALTERNATE_MAXVALIDGR ) {
				strcpy(text,NULLMEDIUM);
				valid=false;
			} else {
				if (value >= 100) sprintf(text,"%.0lf",value);
					else sprintf(text,"%.1lf",value);
				valid=true;
			}
			wsprintf(BufferValue, TEXT("%S"),text);
			wsprintf(BufferUnit, TEXT("")); // 091227 BUGFIX
			break;

		// B75
		case LK_ALTERN1_ARRIV:
		// B76
		case LK_ALTERN2_ARRIV:
		// B77
		case LK_BESTALTERN_ARRIV:
			wsprintf(BufferValue,_T(NULLMEDIUM));
			if (lktitle)
				_stprintf(BufferTitle, TEXT("Atn%dArr"), lkindex-LK_ALTERNATESARRIV+1);
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			switch(lkindex) {
				case LK_ALTERN1_ARRIV:
					index=Alternate1;
					break;
				case LK_ALTERN2_ARRIV:
					index=Alternate2;
					break;
				case LK_BESTALTERN_ARRIV:
					index=BestAlternate;
					break;
				default:
					index=0;
					break;
			}

			if(ValidWayPoint(index))
			{
				if ( DisplayTextType == DISPLAYFIRSTTHREE)
				{
					 _tcsncpy(BufferTitle,WayPointList[index].Name,3);
					BufferTitle[3] = '\0';
				}
				else if( DisplayTextType == DISPLAYNUMBER) {
					_stprintf(BufferTitle,TEXT("%d"), WayPointList[index].Number );
				} else {
					_tcsncpy(BufferTitle,WayPointList[index].Name, 12);
					// BufferTitle[(sizeof(Text)/sizeof(TCHAR))-1] = '\0';
					if (lktitle)
						BufferTitle[12] = '\0'; // FIX TUNING
					else
						BufferTitle[8] = '\0';  // FIX TUNING
				}
			}
			switch (lkindex) {
				case LK_ALTERN1_ARRIV:
					if ( ValidWayPoint(Alternate1) ) value=ALTITUDEMODIFY*WayPointCalc[Alternate1].AltArriv[AltArrivMode];
					else value=INVALID_DIFF;
					break;
				case LK_ALTERN2_ARRIV:
					if ( ValidWayPoint(Alternate2) ) value=ALTITUDEMODIFY*WayPointCalc[Alternate2].AltArriv[AltArrivMode];
					else value=INVALID_DIFF;
					break;
				case LK_BESTALTERN_ARRIV:
					if ( ValidWayPoint(BestAlternate) ) value=ALTITUDEMODIFY*WayPointCalc[BestAlternate].AltArriv[AltArrivMode];
					else value=INVALID_DIFF;
					break;
				default:
					value = INVALID_DIFF;
					break;
			}
			if (value <= ALTDIFFLIMIT ) {
				strcpy(text,NULLLONG);
				valid=false;
			} else { // 091221
				if ( (value>-1 && value<=0) || (value>=0 && value<1))
					sprintf(text,"0");
				else {
					sprintf(text,"%+.0f",value);
				}
				valid=true;
			}
			wsprintf(BufferValue, TEXT("%S"),text);
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetAltitudeName()));
			break;

		// B80
		case LK_EXTBATTBANK:
			wsprintf(BufferValue,_T(NULLMEDIUM));
			_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			ivalue=GPS_INFO.ExtBatt_Bank;
			if (ivalue>0) {
				_stprintf(BufferValue,TEXT("%d"), ivalue); // 091101
				valid = true;
			} else {
				valid = false;
			}
			break;

		// B81
		// B82
		case LK_EXTBATT1VOLT:
		case LK_EXTBATT2VOLT:
			wsprintf(BufferValue,_T(NULLMEDIUM));
			_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			value = (lkindex==LK_EXTBATT1VOLT?GPS_INFO.ExtBatt1_Voltage:GPS_INFO.ExtBatt2_Voltage);
			if (value>0.0) {
				_stprintf(BufferValue,TEXT("%0.2fv"), value);
				valid = true;
			} else {
				valid = false;
			}
			break;

		// B48 091216  OAT Outside Air Temperature
		case LK_OAT:
			value=GPS_INFO.OutsideAirTemperature;
			_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			if (value<1||value>100) {
				wsprintf(BufferValue, TEXT("---"));
			} else {
                	        sprintf(text,"%.0lf",value);
                	        wsprintf(BufferValue, TEXT("%S%S"),text,_T(DEG));
                	}
			break;

		// B84  100126
		case LK_AQNH:
			if (lktitle)
                        	_stprintf(BufferTitle, TEXT("aAlt"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			if (ALTITUDEMODIFY==TOMETER)
				value=TOFEET*DerivedDrawInfo.NavAltitude;
			else
				value=TOMETER*DerivedDrawInfo.NavAltitude;
			valid=true;
			sprintf(text,"%d",(int)value);
			wsprintf(BufferValue, TEXT("%S"),text);
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetInvAltitudeName()));
			break;

		// B85  100126
		case LK_AALTAGL:
			if (lktitle)
                        	_stprintf(BufferTitle, TEXT("aHAGL"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			if (!CALCULATED_INFO.TerrainValid) { //@@ 101013
				wsprintf(BufferValue, TEXT(NULLLONG));
				wsprintf(BufferUnit, TEXT("%s"),(Units::GetAltitudeName()));
				valid=false;
				break;
			}
			if (ALTITUDEMODIFY==TOMETER)
				value=TOFEET*DerivedDrawInfo.AltitudeAGL;
			else
				value=TOMETER*DerivedDrawInfo.AltitudeAGL;
			valid=true;
			sprintf(text,"%d",(int)value);
			wsprintf(BufferValue, TEXT("%S"),text);
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetInvAltitudeName()));
			break;

		// B136
		case LK_TARGET_DIST:
			if (LKTargetIndex<0 || LKTargetIndex>=MAXTRAFFIC) {
					strcpy(text,NULLMEDIUM);
			} else {
	                        if (GPS_INFO.FLARM_Traffic[LKTargetIndex].ID <=0) {
					strcpy(text,NULLMEDIUM);
				} else {
					// get values
	                        	value=DISTANCEMODIFY*LKTraffic[LKTargetIndex].Distance;
					if (value>99) {
						strcpy(text,NULLMEDIUM);
					} else {
						valid=true;
						sprintf(text,"%.1f",value);
					}
				}
			}
			wsprintf(BufferValue, TEXT("%S"),text);
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetDistanceName()));
			wsprintf(BufferTitle, TEXT("Dist"),text);
			break;

		// B137
		case LK_TARGET_TO:
			if (LKTargetIndex<0 || LKTargetIndex>=MAXTRAFFIC) {
					strcpy(text,NULLMEDIUM);
					wsprintf(BufferValue, TEXT("%S"),text);
			} else {
	                        if (GPS_INFO.FLARM_Traffic[LKTargetIndex].ID <=0) {
					strcpy(text,NULLMEDIUM);
					wsprintf(BufferValue, TEXT("%S"),text);
				} else {
						value = LKTraffic[LKTargetIndex].Bearing -  GPS_INFO.TrackBearing;
						valid=true;
						if (value < -180.0)
							value += 360.0;
						else
							if (value > 180.0)
								value -= 360.0;
						if (value > 1)
						_stprintf(BufferValue, TEXT("%2.0fÂ°Â»"), value);
						else if (value < -1)
						_stprintf(BufferValue, TEXT("Â«%2.0fÂ°"), -value);
						else
							_tcscpy(BufferValue, TEXT("Â«Â»"));
				}
			}
			wsprintf(BufferUnit, TEXT(""));
			wsprintf(BufferTitle, TEXT("To"),text);
			break;

		// B138
		case LK_TARGET_BEARING:
			if (LKTargetIndex<0 || LKTargetIndex>=MAXTRAFFIC) {
					strcpy(text,NULLMEDIUM);
					wsprintf(BufferValue, TEXT("%S"),text);
			} else {
	                        if (GPS_INFO.FLARM_Traffic[LKTargetIndex].ID <=0) {
					strcpy(text,NULLMEDIUM);
					wsprintf(BufferValue, TEXT("%S"),text);
				} else {
						value = LKTraffic[LKTargetIndex].Bearing;
						valid=true;
						if (value == 360)
							_stprintf(BufferValue, TEXT("0Â°"));
						else 
							_stprintf(BufferValue, TEXT("%2.0fÂ°"), value);
				}
			}
			wsprintf(BufferUnit, TEXT(""));
			wsprintf(BufferTitle, TEXT("Brg"),text);
			break;

		// B139
		case LK_TARGET_SPEED:
			if (LKTargetIndex<0 || LKTargetIndex>=MAXTRAFFIC) {
					strcpy(text,NULLMEDIUM);
			} else {
	                        if (GPS_INFO.FLARM_Traffic[LKTargetIndex].ID <=0) {
					strcpy(text,NULLMEDIUM);
				} else {
					value=SPEEDMODIFY*GPS_INFO.FLARM_Traffic[LKTargetIndex].Speed;
					if (value<0||value>9999) value=0; else valid=true;
					sprintf(text,"%d",(int)value);
				}
			}
			wsprintf(BufferValue, TEXT("%S"),text);
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetHorizontalSpeedName()));
			wsprintf(BufferTitle, TEXT("GS"));
			break;

		// B140
		case LK_TARGET_ALT:
			if (LKTargetIndex<0 || LKTargetIndex>=MAXTRAFFIC) {
					strcpy(text,NULLMEDIUM);
			} else {
	                        if (GPS_INFO.FLARM_Traffic[LKTargetIndex].ID <=0) {
					strcpy(text,NULLMEDIUM);
				} else {
					value=ALTITUDEMODIFY*GPS_INFO.FLARM_Traffic[LKTargetIndex].Altitude;
					valid=true;
					sprintf(text,"%d",(int)value);
				}
			}
                       	_stprintf(BufferTitle, TEXT("Alt"));
			wsprintf(BufferValue, TEXT("%S"),text);
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetAltitudeName()));
			break;

		// B141
		// DO NOT USE RELATIVE ALTITUDE: when not real time, it won't change in respect to our position!!!
		// This is negative when target is below us because it represent a remote position
		case LK_TARGET_ALTDIFF:
			if (LKTargetIndex<0 || LKTargetIndex>=MAXTRAFFIC) {
					strcpy(text,NULLMEDIUM);
			} else {
	                        if (GPS_INFO.FLARM_Traffic[LKTargetIndex].ID <=0) {
					strcpy(text,NULLMEDIUM);
				} else {
					value=ALTITUDEMODIFY*(DerivedDrawInfo.NavAltitude-GPS_INFO.FLARM_Traffic[LKTargetIndex].Altitude)*-1;
					valid=true;
					sprintf(text,"%+d",(int)value);
				}
			}
                       	_stprintf(BufferTitle, TEXT("RelAlt"));
			wsprintf(BufferValue, TEXT("%S"),text);
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetAltitudeName()));
			break;

		// B142
		case LK_TARGET_VARIO:
			if (LKTargetIndex<0 || LKTargetIndex>=MAXTRAFFIC) {
					strcpy(text,NULLMEDIUM);
					wsprintf(BufferValue, TEXT("%S"),text);
					_tcscpy(BufferUnit, _T(""));
			} else {
	                        if (GPS_INFO.FLARM_Traffic[LKTargetIndex].ID <=0) {
					strcpy(text,NULLMEDIUM);
					wsprintf(BufferValue, TEXT("%S"),text);
					_tcscpy(BufferUnit, _T(""));
				} else {
					value = LIFTMODIFY*GPS_INFO.FLARM_Traffic[LKTargetIndex].ClimbRate;
					valid=true;
					_stprintf(BufferValue,varformat,value);
					wsprintf(BufferUnit, TEXT("%s"),Units::GetVerticalSpeedName());
				}
			}
			_tcscpy(BufferTitle, TEXT("Var"));
			break;

		// B143
		case LK_TARGET_AVGVARIO:
			if (LKTargetIndex<0 || LKTargetIndex>=MAXTRAFFIC) {
					strcpy(text,NULLMEDIUM);
					wsprintf(BufferValue, TEXT("%S"),text);
					_tcscpy(BufferUnit, _T(""));
			} else {
	                        if (GPS_INFO.FLARM_Traffic[LKTargetIndex].ID <=0) {
					strcpy(text,NULLMEDIUM);
					wsprintf(BufferValue, TEXT("%S"),text);
					_tcscpy(BufferUnit, _T(""));
				} else {
					value = LIFTMODIFY*GPS_INFO.FLARM_Traffic[LKTargetIndex].Average30s;
					valid=true;
					_stprintf(BufferValue,varformat,value);
					wsprintf(BufferUnit, TEXT("%s"),Units::GetVerticalSpeedName());
				}
			}
			_tcscpy(BufferTitle, TEXT("Var30"));
			break;

		// B144
		case LK_TARGET_ALTARRIV:
			wsprintf(BufferValue,_T(NULLLONG));
			_stprintf(BufferTitle, TEXT("Arr"));
			if (LKTargetIndex<0 || LKTargetIndex>=MAXTRAFFIC) {
					strcpy(text,NULLMEDIUM);
					wsprintf(BufferValue, TEXT("%S"),text);
			} else {
	                        if (GPS_INFO.FLARM_Traffic[LKTargetIndex].ID <=0) {
					strcpy(text,NULLMEDIUM);
					wsprintf(BufferValue, TEXT("%S"),text);
				} else {

					value=ALTITUDEMODIFY*LKTraffic[LKTargetIndex].AltArriv;
					if ( value > ALTDIFFLIMIT ) {
						valid=true;
						_stprintf(BufferValue,TEXT("%+1.0f"), value);
					} else {
						strcpy(text,NULLMEDIUM);
						wsprintf(BufferValue, TEXT("%S"),text);
					}
				}
			}
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetAltitudeName()));
			break;

		// B145
		case LK_TARGET_GR:
			wsprintf(BufferValue,_T(NULLLONG));
			_stprintf(BufferTitle, TEXT("ReqE"));
			_tcscpy(BufferUnit,_T(""));
			if (LKTargetIndex<0 || LKTargetIndex>=MAXTRAFFIC) {
					strcpy(text,NULLMEDIUM);
			} else {
	                        if (GPS_INFO.FLARM_Traffic[LKTargetIndex].ID <=0) {
					strcpy(text,NULLMEDIUM);
					wsprintf(BufferValue, TEXT("%S"),text);
				} else {
					value=LKTraffic[LKTargetIndex].GR;
					if (value <1 || value >=ALTERNATE_MAXVALIDGR )
						strcpy(text,NULLMEDIUM);
					else {
						if (value >= 100) sprintf(text,"%.0lf",value);
							else sprintf(text,"%.1lf",value);
						valid=true;
					}
				}
			}
			wsprintf(BufferValue, TEXT("%S"),text);
			break;

		// B146
		case LK_TARGET_EIAS:
			_stprintf(BufferTitle, TEXT("eIAS"));
			_tcscpy(BufferUnit,_T(""));
			if (LKTargetIndex<0 || LKTargetIndex>=MAXTRAFFIC) {
					strcpy(text,NULLMEDIUM);
			} else {
				value=SPEEDMODIFY*LKTraffic[LKTargetIndex].EIAS;
				if (value<0||value>999) value=0; else valid=true;
				sprintf(text,"%d",(int)value);
				wsprintf(BufferUnit, TEXT("%s"),(Units::GetHorizontalSpeedName()));
			}
			wsprintf(BufferValue, TEXT("%S"),text);
			break;

		case LK_DUMMY:
			wsprintf(BufferValue,_T(NULLLONG));
			if (lktitle)
				_stprintf(BufferTitle, TEXT("Dummy"));
			else
				_stprintf(BufferTitle, TEXT("Dummy"));

			wsprintf(BufferUnit, TEXT("."));
			break;

		case LK_EMPTY:
			wsprintf(BufferValue, TEXT(""));
			//wsprintf(BufferUnit, TEXT(""));
			wsprintf(BufferTitle, TEXT(""));
			break;
		case LK_ERROR:
			// let it be shown entirely to understand the problem
			valid=true;
			wsprintf(BufferValue, TEXT("000"));
			wsprintf(BufferUnit, TEXT("e"));
			wsprintf(BufferTitle, TEXT("Err"));
			break;
		default:
			valid=false;
			wsprintf(BufferValue, TEXT(NULLMEDIUM));
			wsprintf(BufferUnit, TEXT("."));
			if ( lkindex >=NUMSELECTSTRINGS || lkindex <1 ) 
				wsprintf(BufferTitle, TEXT("BadErr"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			break;
	}

  return valid;
}

// simple format distance value for a given index. BufferTitle always NULLed
// wpindex is a WayPointList index
// wpvirtual true means virtual waypoint, and relative special checks

void MapWindow::LKFormatDist(const int wpindex, const bool wpvirtual, TCHAR *BufferValue, TCHAR *BufferUnit) {

  static int	index;
  static double value;
  static char	text[LKSIZEBUFFERVALUE];

  index=-1;

  if (wpvirtual) {
	if ( ValidResWayPoint(wpindex) ) index = wpindex;
  } else {
	if ( ValidWayPoint(wpindex) ) index = wpindex;
  }
  if (index>=0) {
	value=WayPointCalc[index].Distance*DISTANCEMODIFY;
	if (value>99)
		sprintf(text,"%.0f",value);
	else
		sprintf(text,"%.1f",value);
  } else {
	strcpy(text,NULLMEDIUM);
  }
  wsprintf(BufferValue, TEXT("%S"),text);
  wsprintf(BufferUnit, TEXT("%s"),(Units::GetDistanceName()));
  return;
}

void MapWindow::LKFormatBrgDiff(const int wpindex, const bool wpvirtual, TCHAR *BufferValue, TCHAR *BufferUnit) {

  static int	index;
  static double value;

  index=-1;

  if (wpvirtual) {
	if ( ValidResWayPoint(wpindex) ) index = wpindex;
  } else {
	if ( ValidWayPoint(wpindex) ) index = wpindex;
  }
  _tcscpy(BufferValue,_T(NULLMEDIUM)); 
  _tcscpy(BufferUnit,_T(""));
  if (index>=0) {
	if (DisplayMode != dmCircling) {
		value = WayPointCalc[index].Bearing -  GPS_INFO.TrackBearing;
		if (value < -180.0)
			value += 360.0;
		else
			if (value > 180.0)
				value -= 360.0;
#ifndef __MINGW32__
		if (value > 1)
			_stprintf(BufferValue, TEXT("%2.0f°»"), value);
		else if (value < -1)
			_stprintf(BufferValue, TEXT("«%2.0f°"), -value);
		else
			_tcscpy(BufferValue, TEXT("«»"));
#else
		if (value > 1)
			_stprintf(BufferValue, TEXT("%2.0fÂ°Â»"), value);
		else if (value < -1)
			_stprintf(BufferValue, TEXT("Â«%2.0fÂ°"), -value);
		else
			_tcscpy(BufferValue, TEXT("Â«Â»"));
	}
#endif
  }
}


void MapWindow::LKFormatGR(const int wpindex, const bool wpvirtual, TCHAR *BufferValue, TCHAR *BufferUnit) {

  static int	index;
  static double value;
  static char	text[LKSIZEBUFFERVALUE];

  index=-1;

  if (wpvirtual) {
	if ( ValidResWayPoint(wpindex) ) index = wpindex;
  } else {
	if ( ValidWayPoint(wpindex) ) index = wpindex;
  }
  _tcscpy(BufferValue,_T(NULLMEDIUM)); 
  _tcscpy(BufferUnit,_T(""));

  if (index>=0) {
	value=WayPointCalc[index].GR;
  } else {
	value=INVALID_GR;
  }

  if (value >=1 && value <MAXEFFICIENCYSHOW ) {
	if (value >= 100)
		sprintf(text,"%.0lf",value);
	else
		sprintf(text,"%.1lf",value);

	wsprintf(BufferValue, TEXT("%S"),text);
  }
}

void MapWindow::LKFormatAltDiff(const int wpindex, const bool wpvirtual, TCHAR *BufferValue, TCHAR *BufferUnit) {

  static int	index;
  static double value;
  static char	text[LKSIZEBUFFERVALUE];

  index=-1;

  if (wpvirtual) {
	if ( ValidResWayPoint(wpindex) ) index = wpindex;
  } else {
	if ( ValidWayPoint(wpindex) ) index = wpindex;
  }
  _tcscpy(BufferValue,_T(NULLMEDIUM)); 
  wsprintf(BufferUnit, _T("%s"),(Units::GetAltitudeName()));

  if (index>=0) {
	value=WayPointCalc[index].AltArriv[AltArrivMode]*ALTITUDEMODIFY;
  } else {
	value=INVALID_DIFF;
  }

  if (value > ALTDIFFLIMIT ) {
	if ( value>-1 && value<1 )
		sprintf(text,"0");
	else
		sprintf(text,"%+.0f",value);

	wsprintf(BufferValue, TEXT("%S"),text);
  }
}
@


1.7
log
@pre add
@
text
@d2 6
a7 2
 * $Id: LKProcess.cpp,v 1.6 2009/12/21 17:57:34 root Exp root $
 */
d26 1
d28 1
a28 1
///: #define NULLSHORT	"--"  091221
a30 1
///: #define NULLLONG	"----" // 091221
d35 2
d38 1
a38 1
///: below this value, altitude differences are useless and not returned
d42 3
a44 5
///:
///: Returns true if value is valid, false if not
///: lktitle is shorter and limited to 6 or 7 chars, good for navboxes
///: Units are empty by default, and valid is false by default
///:
d51 2
d54 1
a54 1
  ///: By default, invalid return value. Set it to true after assigning value in cases
d57 12
a68 1
	_stprintf(BufferUnit,TEXT(""));
d72 1
a72 1
		///: B135
d82 1
a82 1
		///: B39
d93 1
a93 1
		///: B40
d104 1
a104 1
		///: B03
d114 2
a115 1
					value = CALCULATED_INFO.WaypointBearing;
d136 1
a136 1
		///: B78
d168 1
a168 1
		///: B47
d180 109
a288 1
						value = CALCULATED_INFO.WaypointBearing -  GPS_INFO.TrackBearing;
d315 38
a352 1
		///: B11
a363 1
					///: strcpy(text,NULLLONG);
a366 1
				///: strcpy(text,NULLLONG);
d372 1
a372 1
				wsprintf(BufferTitle, TEXT("Dis"),text);
d376 21
d398 93
a490 1
		///: B60
d514 1
a514 1
		///: B83
d534 1
a534 1
		///: B28
d536 1
a536 1
		///: B29
a538 1
				///: TODO CHECK maybe not needed to check index
d561 1
a561 1
		///: B51
a563 1
				///: TODO CHECK maybe not needed to check index
d583 1
a583 1
		///: B30
d585 1
a585 1
		///: B31
a587 1
				///: TODO CHECK maybe not needed to check index
d604 1
a604 1
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetHorizontalSpeedName()));
d608 1
a608 1
		///: B52
a610 1
				///: TODO CHECK maybe not needed to check index
d623 1
a623 1
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetHorizontalSpeedName()));
d627 1
a627 1
		///: B72	WP REQ EFF
d650 1
a650 1
		///: B71	LD AVR 
a652 1
			//_stprintf(BufferUnit,TEXT(""));
d666 4
a669 1
						sprintf(text,"%2.0f",value);
d676 3
a678 3
		///: B12
		///: Arrival altitude using current MC  and total energy. Does not use safetymc.
		///: updated 091005 total energy now disabled!
d688 1
a688 2
					///: don't use current MC...
					///: value=ALTITUDEMODIFY*DerivedDrawInfo.NextAltitudeDifference; 
d699 2
a700 2
		///: B13
		///: Using MC! 
a709 1
					///: value=ALTITUDEMODIFY*DerivedDrawInfo.NextAltitudeRequired;
d720 1
a720 1
		///: B05
d739 1
a739 1
		///: B04
d759 2
a760 2
		///: B00
		case LK_HGPS:
d772 1
a772 1
		///: B01		AltAgl
d775 1
a775 1
                        	_stprintf(BufferTitle, TEXT("AltAGL"));
d778 7
d792 1
a792 1
		///: B33
d805 19
a823 1
		///: B70
d833 1
a833 1
		///: B20
d849 1
a849 1
		///: B23
d877 1
a877 1
		///: B06
d881 1
a881 1
			if (value<0||value>999) value=0; else valid=true;
d892 1
a892 1
		///: B32
d895 4
d903 7
a909 2
			} else
				wsprintf(BufferValue, TEXT(NULLMEDIUM));
a910 4
			if (lktitle)
				wsprintf(BufferTitle, TEXT("IAS"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
d913 1
a913 1
		///: B43
d925 13
d939 1
a939 1
		///: B44
d941 3
a943 9
			// if (GPS_INFO.AirspeedAvailable) {
				value=LIFTMODIFY*DerivedDrawInfo.NettoVario;
				///: 091214 bugfix nettovario, negative values not reported
				if (value<-100||value>100) value=0; else valid=true;
				///: sprintf(text,"%d",(int)value); BUGFIX 091214
				_stprintf(BufferValue,TEXT("%+0.1f"),value);
				///: wsprintf(BufferValue, TEXT("%S"),text);  BUGFIX 091227
			// } else
			//	wsprintf(BufferValue, TEXT(NULLMEDIUM));
d949 1
a949 1
		///: B54 091221
d952 4
d964 11
a974 2
			} else 
				wsprintf(BufferValue, TEXT(NULLMEDIUM)); 
a975 4
			if (lktitle)
				wsprintf(BufferTitle, TEXT("TAS"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
d978 1
a978 1
		///: B55  Team Code 091216
d992 1
a992 1
		///: B56  Team Code 091216
d1012 1
a1012 1
		///: B57 Team Bearing Difference 091216
d1017 1
a1017 1
				_stprintf(BufferTitle, TEXT("TmDiff"));
d1038 1
a1038 1
		///: B58 091216 Team Range Distance
d1054 1
a1054 1
				wsprintf(BufferTitle, TEXT("TmDis"),text);
d1059 1
a1059 1
		///: B34
d1074 1
a1074 1
		///:B35
d1085 1
a1085 1
		///: B73
d1098 1
a1098 1
		///: B131
d1101 1
a1101 1
			if (DerivedDrawInfo.WindSpeed>=1) {
d1111 1
a1111 1
		///: B25
d1116 3
a1118 3
			value=DerivedDrawInfo.WindSpeed;
			if (value>0 ) {
				_stprintf(BufferValue,TEXT("%1.0f"), value, SPEEDMODIFY*DerivedDrawInfo.WindSpeed );
a1120 1
				///: _stprintf(BufferValue,TEXT(NULLSHORT));
d1125 1
a1125 1
		///: B26
d1128 1
a1128 2
			wsprintf(BufferUnit, TEXT("%s"),Units::GetHorizontalSpeedName());
			if (DerivedDrawInfo.WindSpeed>0) {
d1139 1
a1139 1
		///: B07  091221
d1157 1
a1157 1
		///: B08 091216 091221
d1174 1
a1174 1
		///: B21 091221
d1192 1
a1192 1
		///: B10
d1202 1
a1202 1
					wsprintf(BufferTitle, TEXT("ManuMC"));
d1207 1
a1207 1
					wsprintf(BufferTitle, TEXT("AutoMC"));
d1214 1
a1214 1
		///: B2 091221
d1232 1
a1232 1
		///: B22 091221
d1249 1
a1249 1
		///: B63 091221
d1256 4
a1259 1
				sprintf(text,"%+.1lf",value);
d1265 1
a1265 1
				wsprintf(BufferTitle, TEXT("Th.All"),text);
d1270 1
a1270 1
		///: B24
d1278 1
a1278 1
			_stprintf(BufferValue,TEXT("%+0.1f"),value);
d1281 1
a1281 1
				wsprintf(BufferTitle, TEXT("Vario"),text);
d1286 1
a1286 1
		///: B15 Arrival altitude , no more total energy
d1306 1
a1306 1
		///: B16
d1326 1
a1326 1
		///: B18
a1330 1
					///: ValidFinish is on only when inside last turnsector??
d1350 1
a1350 1
				wsprintf(BufferTitle, TEXT("TskDis"),text);
d1355 1
a1355 1
		///: B74
d1357 1
a1357 1
			if ( ValidTaskPoint(ActiveWayPoint) != false ) {
d1372 1
a1372 1
		///: B79
a1388 1
			///: use also NearestAirspaceName
d1392 1
a1392 1
		///: B66
d1402 2
a1403 10
					///: the ValidFinish() seem to return FALSE when is actually valid.
					///: In any case we do not use it for the vanilla GR
				/*
					if (CALCULATED_INFO.ValidFinish) {
						value = 0;
					} else {
						value = CALCULATED_INFO.GRFinish;
						valid=true;
					}
				*/
d1418 1
a1418 1
		///: B19
a1428 2
					///: the ValidFinish() seem to return FALSE when it is actually valid.
					///: TODO CHECK
d1446 1
a1446 1
		///: B38
a1447 1
			///: wsprintf(BufferValue,_T(NULLSHORT));
a1456 1
					///: INVALID_GR is 999, so >MAXVALID does include it
d1469 1
a1469 1
		///: B53
a1475 1
				///: INVALID_GR is 999, so >MAXVALID does include it
d1487 1
a1487 1
		///: B64
d1493 1
a1493 1
					_stprintf(BufferValue,TEXT("%+0.1f"),value);
d1502 1
a1502 1
		///: B59
d1518 1
a1518 1
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetHorizontalSpeedName()));
d1521 1
a1521 1
		///: B61
d1537 1
a1537 1
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetHorizontalSpeedName()));
d1540 1
a1540 1
		///: B17
d1556 1
a1556 1
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetHorizontalSpeedName()));
d1560 1
a1560 1
		///: B132 Final arrival with MC 0 , no totaly energy.
d1580 1
a1580 1
		///: B41	091006 using new task ete 
d1582 1
a1582 1
		///: B133  091222 using old ETE corrected now
a1589 2
			///: if ( (ValidTaskPoint(ActiveWayPoint) != false) && (CALCULATED_INFO.TaskTimeToGo< 0.9*ERROR_TIME)) {
			///:if ( (ValidTaskPoint(ActiveWayPoint) != false) && (CALCULATED_INFO.LKTaskETE< 0.9*ERROR_TIME)) { 091222
a1590 1
				///: if (CALCULATED_INFO.TaskTimeToGo > 0) {
a1591 1
				///:if ( (CALCULATED_INFO.LKTaskETE > 0) && (CALCULATED_INFO.LKTaskETE<0.9*ERROR_TIME)) {
a1592 1
					///: Units::TimeToText(BufferValue, (int)CALCULATED_INFO.TaskTimeToGo);
a1598 1
					///: 091222 use NextETE if TskETE unavailable in single waypoint mode
d1612 1
a1612 1
		///: B42
a1619 3
			///: 091006 TESTFIX
			///: if ( (ValidTaskPoint(ActiveWayPoint) != false) && (CALCULATED_INFO.LegTimeToGo< 0.9*ERROR_TIME)) {

a1622 1
				///: if (CALCULATED_INFO.LegTimeToGo > 0) {
a1624 1
					///: Units::TimeToText(BufferValue, (int)CALCULATED_INFO.LegTimeToGo);
d1636 1
a1636 1
		///: B45
d1655 1
a1655 1
		///: B46
d1674 1
a1674 1
		///: B36		TmFly
d1691 1
a1691 1
		///: B09		Last thermal time
d1709 1
a1709 1
		///: B27
a1713 1
			///: we do not yet support colours
d1744 1
a1744 1
		///: B37
d1746 4
a1749 4
			wsprintf(BufferValue,_T(NULLMEDIUM));
			wsprintf(BufferUnit,_T("g"));
			_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
			if ( GPS_INFO.AccelerationAvailable) {
d1751 8
a1758 1
				_stprintf(BufferValue,TEXT("%+2.2f"), value);
d1762 1
a1762 1
		///: B65 FIXED 100125
d1773 6
a1778 1
				_stprintf(BufferValue,TEXT("%2.0f%%"), value);
d1794 1
a1794 1
		///: B62
a1807 1
				///: we do not yet support colours
d1826 1
a1826 1
		///: B133  091222 using old ETE corrected now
d1846 2
a1847 2
		///: B134
		///: Using MC=0!  total energy disabled
d1867 1
a1867 1
		///: B67
d1869 1
a1869 1
		///: B68
d1871 1
a1871 1
		///: B69
d1904 1
a1904 1
					///: BufferTitle[(sizeof(Text)/sizeof(TCHAR))-1] = '\0';
d1911 1
a1911 1
			///: it would be time to use Alternate[] ..
d1941 1
a1941 1
		///: B75
d1943 1
a1943 1
		///: B76
d1945 1
a1945 1
		///: B77
d1978 1
a1978 1
					///: BufferTitle[(sizeof(Text)/sizeof(TCHAR))-1] = '\0';
a1984 1
			///: it would be time to use Alternate[] ..
d2017 1
a2017 1
		///: B80
d2030 2
a2031 2
		///: B81
		///: B82
d2045 1
a2045 1
		///: B48 091216  OAT Outside Air Temperature
d2057 276
d2349 1
a2349 1
			///: let it be shown entirely to understand the problem
d2369 136
@


1.6
log
@*** empty log message ***
@
text
@d2 1
a2 1
 * $Id: LKProcess.cpp,v 1.5 2009/12/16 13:57:35 root Exp root $
d23 1
a23 1
#define NULLSHORT	"--"
d25 2
a26 1
#define NULLLONG	"----"
d28 1
d39 1
a62 1
			//_stprintf(BufferUnit,TEXT(""));
a72 1
			//_stprintf(BufferUnit,TEXT(""));
a83 1
			//_stprintf(BufferUnit,TEXT(""));
a89 1
			//_stprintf(BufferUnit,TEXT(""));
a120 1
			//_stprintf(BufferUnit,TEXT(""));
d152 1
a152 2
			wsprintf(BufferValue,_T(NULLLONG));
			//_stprintf(BufferUnit,TEXT(""));
d201 2
a202 1
					strcpy(text,NULLLONG);
d205 2
a206 1
				strcpy(text,NULLLONG);
d227 1
a227 1
					strcpy(text,NULLLONG);
d230 1
a230 1
				strcpy(text,NULLLONG);
d240 20
d278 1
a278 1
					strcpy(text,NULLLONG);
d281 1
a281 1
				strcpy(text,NULLLONG);
d301 1
a301 1
					strcpy(text,NULLLONG);
d304 1
a304 1
				strcpy(text,NULLLONG);
a359 1
			//_stprintf(BufferUnit,TEXT(""));
a367 1
					valid=true;
d370 1
a370 1
					else
d373 2
d390 4
a393 3
				if (value <-99 ||  value >=ALTERNATE_MAXVALIDGR )
					strcpy(text,"++"); 
				else
d457 4
a460 1
			if (value <-99 ||  value >=ALTERNATE_MAXVALIDGR ) strcpy(text,"++"); else
a466 1
			//_stprintf(BufferUnit,TEXT(""));
d477 4
a480 3
			if (value <-99 ||  value >=ALTERNATE_MAXVALIDGR )
				strcpy(text,"++");
			else
a486 1
			//_stprintf(BufferUnit,TEXT(""));
d634 1
a634 1
				wsprintf(BufferValue, TEXT("%S"),text);
d642 1
a642 1
		///: B54
d646 6
a651 2
				if (value<0||value>999) value=0; else valid=true;
				sprintf(text,"%d",(int)value);
d667 1
d707 1
d776 1
d785 1
a785 2
			//_stprintf(BufferUnit,TEXT(""));
			if (DerivedDrawInfo.WindSpeed>0) {
d805 2
a806 1
				_stprintf(BufferValue,TEXT(NULLSHORT));
d825 1
a825 1
		///: B07
d828 7
a834 2
			if (value<20) sprintf(text,"%+.1lf",value);
				else sprintf(text,"%+.0lf",value);
d843 1
a843 1
		///: B08 091216
d846 6
a851 2
			valid=true;
			sprintf(text,"%+d",(int)value);
d860 1
a860 1
		///: B21
d863 7
a869 2
			if (value<20) sprintf(text,"%+.1lf",value);
			else sprintf(text,"%+.0lf",value);
a879 1
			//_stprintf(BufferUnit,TEXT(""));
d881 1
d900 1
a900 1
		///: B2
d903 7
a909 3
			valid=true;
			if (value<20) sprintf(text,"%+.1lf",value);
				else sprintf(text,"%+.0lf",value);
d918 1
a918 1
		///: B22
d921 6
a926 2
			valid=true;
			sprintf(text,"%+d",(int)value);
d935 1
a935 1
		///: B63
d938 2
a939 1
				value=0.0;
d942 1
a944 1
			sprintf(text,"%+.1lf",value);
a1079 1
			//_stprintf(BufferUnit,TEXT(""));
d1100 1
a1100 1
					else
d1103 2
d1143 2
a1144 2
			wsprintf(BufferValue,_T(NULLSHORT));
			//_stprintf(BufferUnit,TEXT(""));
d1156 1
a1156 1
					else
d1160 1
d1280 3
a1282 1
			wsprintf(BufferValue,_T(NULLLONG));
d1286 1
a1286 1
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[lkindex].Title );
d1289 2
a1290 1
			if ( (ValidTaskPoint(ActiveWayPoint) != false) && (CALCULATED_INFO.LKTaskETE< 0.9*ERROR_TIME)) {
d1292 2
a1293 1
				if (CALCULATED_INFO.LKTaskETE > 0) {
d1300 12
a1311 2
				} else
					wsprintf(BufferValue, TEXT(NULLTIME));
d1465 1
a1465 1
		///: B65
a1468 11
			//wsprintf(BufferUnit,_T(""));
/* TODO FIX 
                Value=PDABatteryPercent;
                if (Value<1||Value>100) sprintf(text,"---");
                else sprintf(text,"%.0lf%%",Value);
                if (Value<15 ) TextDisplayMode.AsFlag.Color = TEXTLIGHTRED;
                else if (Value<30 ) TextDisplayMode.AsFlag.Color = TEXTLIGHTYELLOW;
                wsprintf(BufferValue, TEXT("%S"),text);
                showunit=false;
                wsprintf(BufferTitle, TEXT("Batt"),text);
*/
d1473 6
a1478 2
			_stprintf(BufferValue,TEXT("%2.0f%%"), value);
			valid = true;
d1524 2
a1525 2

		///: B133
d1542 1
d1637 1
a1637 1
			wsprintf(BufferUnit, TEXT("%s"),(Units::GetAltitudeName()));
d1705 6
a1710 2
			} else {
				sprintf(text,"%+.0f",value);
@


1.5
log
@*** empty log message ***
@
text
@d2 1
a2 1
 * $Id: LKProcess.cpp,v 1.4 2009/11/01 16:22:35 root Exp root $
d627 2
a628 2
			} else
				wsprintf(BufferValue, TEXT(NULLMEDIUM));
d635 79
a713 1
				
d809 13
d1332 17
d1679 11
@


1.4
log
@1.15b
@
text
@d2 1
a2 1
 * $Id: LKProcess.cpp,v 1.3 2009/09/16 10:59:24 root Exp root $
d42 1
d608 4
a611 2
				if (value<0||value>999) value=0; else valid=true;
				sprintf(text,"%d",(int)value);
d1147 4
a1150 1
					Units::TimeToTextDown(BufferValue, (int)CALCULATED_INFO.LKTaskETE);
d1154 1
a1154 1
			wsprintf(BufferUnit, TEXT("h"));
d1175 4
a1178 1
					Units::TimeToTextDown(BufferValue, (int)WayPointCalc[index].NextETE);
d1182 1
a1182 1
			wsprintf(BufferUnit, TEXT("h"));
d1547 3
a1549 3
			value=GPS_INFO.ExtBatt_Bank;
			if (value>0) {
				_stprintf(BufferValue,TEXT("%2.0d"), value);
d1564 1
a1564 1
				_stprintf(BufferValue,TEXT("%2.1fV"), value);
@


1.3
log
@ok
@
text
@d2 1
a2 1
 * $Id: LKProcess.cpp,v 1.2 2009/09/07 19:08:58 root Exp root $
d28 2
d31 3
a33 1
#define	ALTDIFFLIMIT	-2000
d36 3
a38 1
bool MapWindow::LKFormatValue(const short fvindex, const bool longtitle, TCHAR *BufferValue, TCHAR *BufferUnit, TCHAR *BufferTitle) {
d42 2
a45 8
  static char	text[LKSIZETEXT];
  ///: time stuff
  int d;
  bool negative;
  int dd;
  int thours;
  int tmins;
  int tseconds;
d47 13
a59 1
	switch(fvindex) {
d61 1
d64 13
a76 16
			d=DetectCurrentTime();
			negative = (d<0);
			dd = abs(d) % (3600*24);
			thours = (dd/3600);
			tmins = (dd/60-thours*60);
			tseconds = (dd-tmins*60-thours*3600);
			thours = thours % 24;
			if (negative) {
				if (thours>0) {
					thours = -thours;
				} else if (tmins>0) {
					tmins = -tmins;
				} else {
					tseconds = -tseconds;
				}
			}
d78 2
a79 3
			_stprintf(BufferValue,TEXT("%d:%02d:%02d"),thours, tmins, tseconds);
			if (longtitle)
				_stprintf(BufferTitle,TEXT("LocalTime"));
d81 2
a82 2
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[fvindex].Title );
			_stprintf(BufferUnit,TEXT(""));
d86 1
a86 1
		///: B3
d89 3
a91 2
			if (longtitle)
				_stprintf(BufferTitle, TEXT("Bearing"));
d93 1
a93 1
				_stprintf(BufferTitle, TEXT("Brg"));
d118 33
d154 3
a156 2
			if (longtitle)
				_stprintf(BufferTitle, TEXT("Direction"));
d158 1
a158 1
				_stprintf(BufferTitle, TEXT("Dir"));
d210 2
a211 2
			if (longtitle)
				wsprintf(BufferTitle, TEXT("WP Dist"),text);
d213 25
a237 1
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[fvindex].Title );
d248 1
a248 1
					if ( fvindex == LK_AA_DISTMAX )
d265 24
a288 1
			_stprintf(BufferTitle, TEXT("%s"), Data_Options[fvindex].Title );
d299 1
a299 1
					if ( fvindex == LK_AA_SPEEDMAX )
d314 1
a314 1
			_stprintf(BufferTitle, TEXT("%s"), Data_Options[fvindex].Title );
d317 19
d337 1
a337 1
		///: B129	WP REQ EFF
d340 3
a342 2
			if (longtitle)
				_stprintf(BufferTitle, TEXT("Req.EFF"));
d344 1
a344 1
				_stprintf(BufferTitle, TEXT("Req.EFF"));
d363 3
a365 2
			if (longtitle)
				_stprintf(BufferTitle, TEXT("Avr.EFF"));
d367 1
a367 1
				_stprintf(BufferTitle, TEXT("Avr.EFF"));
d376 1
a376 1
						sprintf(text,"%.0f",value);
d384 2
a385 1
		///: Using MC! And still with that pesky total_energy pending
d388 2
a389 2
			if (longtitle)
				_stprintf(BufferTitle, TEXT("MC.Arriv"));
d391 1
a391 1
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[fvindex].Title );
d395 3
a397 1
					value=ALTITUDEMODIFY*DerivedDrawInfo.NextAltitudeDifference;
d408 1
a408 1
		///: Using MC! And still with that pesky total_energy pending
d411 2
a412 2
			if (longtitle)
				_stprintf(BufferTitle, TEXT("Alt.Req"));
d414 1
a414 1
				_stprintf(BufferTitle, TEXT("AltReq"));
d418 6
a423 2
					value=ALTITUDEMODIFY*DerivedDrawInfo.NextAltitudeRequired;
					_stprintf(BufferValue,TEXT("%+1.0f"), value);
d429 1
a429 1
		///: B5
d431 2
a432 2
			if (longtitle)
                       		_stprintf(BufferTitle, TEXT("Cru.EFF"));
d434 1
a434 1
                       		_stprintf(BufferTitle, TEXT("Cru.EFF"));
d443 1
d446 1
a446 1
		///: B4
d449 4
a452 1
                        _stprintf(BufferTitle, TEXT("Ins.EFF"));
d463 1
d466 1
a466 1
		///: B0
d468 4
d477 13
a489 1
			_stprintf(BufferTitle, TEXT("%s"), Data_Options[fvindex].Title );
d502 1
a502 1
			_stprintf(BufferTitle, TEXT("%s"), Data_Options[fvindex].Title );
d512 1
a512 1
			_stprintf(BufferTitle, TEXT("%s"), Data_Options[fvindex].Title );
d525 2
a526 2
			if (longtitle)
				wsprintf(BufferTitle, TEXT("GndAlt"),text);
d528 1
a528 1
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[fvindex].Title );
d534 3
a536 2
			if (longtitle)
				_stprintf(BufferTitle, TEXT("Track"));
d538 1
a538 1
				_stprintf(BufferTitle, TEXT("Trk"));
d559 1
a559 1
		///: B6
d567 2
a568 2
			if (longtitle)
				wsprintf(BufferTitle, TEXT("GndSpeed"));
d570 1
a570 1
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[fvindex].Title );
d584 45
a628 2
			if (longtitle)
				wsprintf(BufferTitle, TEXT("I AirSpeed"));
d630 1
a630 1
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[fvindex].Title );
d638 1
a638 1
			if (value<0||value>999) value=0; else valid=true;
d642 2
a643 2
			if (longtitle)
				wsprintf(BufferTitle, TEXT("SpMacCready"));
d645 1
a645 1
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[fvindex].Title );
d656 1
a656 1
			_stprintf(BufferTitle, TEXT("%s"), Data_Options[fvindex].Title );
d660 1
a660 1
		///: B130
d662 2
a663 2
			if (longtitle)
				_stprintf(BufferTitle, TEXT("Fl.Level"));
d669 1
d675 1
d688 1
a688 1
			_stprintf(BufferTitle, TEXT("%s"), Data_Options[fvindex].Title );
d702 1
a702 1
			_stprintf(BufferTitle, TEXT("%s"), Data_Options[fvindex].Title );
d715 1
a715 1
		///: B7
d722 2
a723 2
			if (longtitle)
				wsprintf(BufferTitle, TEXT("Th.Last"),text);
d725 1
a725 1
				wsprintf(BufferTitle, TEXT("ThLast"),text);
d735 2
a736 2
			if (longtitle)
				wsprintf(BufferTitle, TEXT("Th.Aver"),text);
d738 1
a738 1
				wsprintf(BufferTitle, TEXT("ThAvg"),text);
d743 1
d745 2
a746 1
			sprintf(text,"%.1lf",value);
d750 2
a751 2
				if (longtitle)
					wsprintf(BufferTitle, TEXT("ManualMC"));
d753 1
a753 1
					wsprintf(BufferTitle, TEXT("manMC"));
d755 1
a755 1
				if (longtitle)
d758 1
a758 1
					wsprintf(BufferTitle, TEXT("autMC"));
d771 2
a772 2
			if (longtitle)
				wsprintf(BufferTitle, TEXT("Ther30\""));
d774 1
a774 1
				wsprintf(BufferTitle, TEXT("Th.30\""));
d784 2
a785 2
			if (longtitle)
				wsprintf(BufferTitle, TEXT("Th.Gain"),text);
d787 1
a787 1
				wsprintf(BufferTitle, TEXT("Gain"),text);
d801 1
a801 1
			if (longtitle)
d804 1
a804 1
				wsprintf(BufferTitle, TEXT("ThAll"),text);
d817 1
a817 1
			if (longtitle)
d820 1
a820 1
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[fvindex].Title );
d823 1
a823 1
		///: B15
d826 2
a827 2
			if (longtitle)
				_stprintf(BufferTitle, TEXT("Fin.Arriv"));
d829 1
a829 1
				_stprintf(BufferTitle, TEXT("Fin.Arr"));
d846 2
a847 2
			if (longtitle)
				_stprintf(BufferTitle, TEXT("Fin.AltReq"));
d849 1
a849 1
				_stprintf(BufferTitle, TEXT("FinAltReq"));
d854 4
a857 1
					_stprintf(BufferValue,TEXT("%+1.0f"), value);
d868 1
d887 2
a888 2
			if (longtitle)
				wsprintf(BufferTitle, TEXT("Fin.Dist"),text);
d890 39
a928 1
				wsprintf(BufferTitle, TEXT("FinDst"),text);
d934 3
a936 2
			if (longtitle)
				_stprintf(BufferTitle, TEXT("Final.GR"));
d938 1
a938 1
				_stprintf(BufferTitle, TEXT("FinGR"));
d967 3
a969 2
			if (longtitle)
				_stprintf(BufferTitle, TEXT("Final.LD"));
d971 1
a971 1
				_stprintf(BufferTitle, TEXT("FinLD"));
d975 2
a976 2
					///: the ValidFinish() seem to return FALSE when is actually valid.
					///: shame on it!
d981 4
d986 2
d989 18
d1010 1
d1018 52
d1074 2
a1075 2
			if (longtitle)
				_stprintf(BufferTitle, TEXT("TaskSpeed"));
d1077 1
a1077 1
				_stprintf(BufferTitle, TEXT("TskSp"));
d1084 1
a1086 1
			wsprintf(BufferValue, TEXT("%S"),text);
d1093 2
a1094 2
			if (longtitle)
				_stprintf(BufferTitle, TEXT("TaskSpAvg"));
d1096 1
a1096 1
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[fvindex].Title );
d1101 1
a1101 1
					if (value<0||value>999) value=0; else valid=true;
d1103 1
a1105 1
			wsprintf(BufferValue, TEXT("%S"),text);
d1110 1
a1110 1
		///: B132
d1113 2
a1114 2
			if (longtitle)
				_stprintf(BufferTitle, TEXT("FinArr.MC0"));
d1116 1
a1116 1
				_stprintf(BufferTitle, TEXT("FinArr.0"));
d1130 1
a1130 1
		///: B41
d1133 23
a1155 2
			if (longtitle)
				_stprintf(BufferTitle, TEXT("Fin.ETE"));
d1157 27
a1183 1
				_stprintf(BufferTitle, TEXT("FinETE"));
d1188 20
a1207 1
					Units::TimeToText(BufferValue, (int)CALCULATED_INFO.TaskTimeToGo);
d1215 1
a1215 1
		///: B36
d1218 2
a1219 2
			if (longtitle)
				_stprintf(BufferTitle, TEXT("FlightTime"));
d1221 1
a1221 1
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[fvindex].Title );
d1236 1
a1236 4
			if (longtitle)
				_stprintf(BufferTitle, TEXT("AA Time"));
			else
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[fvindex].Title );
a1260 2

			//SecsToDisplayTime((int)CALCULATED_INFO.AATTimeToGo);
d1269 77
d1350 2
a1351 2
			if (longtitle)
				_stprintf(BufferTitle, TEXT("Task.ETE"));
d1365 1
d1367 1
a1367 1
		///: Using MC=0! but still with that pesky total_energy pending
d1370 2
a1371 2
			if (longtitle)
				_stprintf(BufferTitle, TEXT("Alt.Arriv"));
d1373 1
a1373 1
				_stprintf(BufferTitle, TEXT("Alt.Arr"));
d1394 2
a1395 2
			if (longtitle)
				_stprintf(BufferTitle, TEXT("Altern%d GR"),fvindex-LK_ALTERNATESGR+1);
d1397 2
a1398 2
				_stprintf(BufferTitle, TEXT("Alt%d.GR"), fvindex-LK_ALTERNATESGR+1);
			switch(fvindex) {
d1425 1
a1425 1
					if (longtitle)
d1432 1
a1432 1
			switch (fvindex) {
d1449 1
a1449 1
			if (value <1 || value >=ALTERNATE_MAXVALIDGR )
d1451 2
a1452 1
			else
d1455 31
d1487 43
d1531 1
d1534 12
d1547 14
d1565 2
a1566 2
			if (longtitle)
				_stprintf(BufferTitle, TEXT("Long.Title"));
d1568 1
a1568 1
				_stprintf(BufferTitle, TEXT("Shrt.T"));
d1575 1
a1575 1
			wsprintf(BufferUnit, TEXT(""));
d1589 1
a1589 1
			if ( fvindex >=NUMSELECTSTRINGS || fvindex <1 ) 
d1592 1
a1592 1
				_stprintf(BufferTitle, TEXT("%s"), Data_Options[fvindex].Title );
@


1.2
log
@ok
@
text
@d2 1
a2 1
 * $Id: LKProcess.cpp,v 1.1 2009/09/02 20:29:08 root Exp root $
d26 4
d72 1
a72 1
				_stprintf(BufferTitle,TEXT("Time"));
d167 1
a167 1
				wsprintf(BufferTitle, TEXT("Dist"),text);
d169 29
a197 1
				wsprintf(BufferTitle, TEXT("Dist"),text);
d200 27
d272 1
d276 22
a297 1
				_stprintf(BufferTitle, TEXT("Alt.Arriv"));
d299 1
a299 1
				_stprintf(BufferTitle, TEXT("Alt.Arriv"));
d303 2
a304 2
					_stprintf(BufferValue,TEXT("%+1.0f"), ALTITUDEMODIFY*DerivedDrawInfo.NextAltitudeDifference);
					valid=true;
d349 40
a388 1
			wsprintf(BufferTitle, TEXT("Alt"),text);
d417 1
d429 1
a429 1
				wsprintf(BufferTitle, TEXT("GS"));
d432 44
d500 29
d537 1
a537 1
				wsprintf(BufferTitle, TEXT("ThLast"),text);
d550 1
a550 1
				wsprintf(BufferTitle, TEXT("Thermal"),text);
d552 1
a552 1
				wsprintf(BufferTitle, TEXT("Therm"),text);
d560 2
a561 1
			if (!ValidTaskPoint(ActiveWayPoint) && ((AutoMcMode==0) || (AutoMcMode==2))) {
d563 1
a563 1
					wsprintf(BufferTitle, TEXT("MCready"));
d565 1
a565 1
					wsprintf(BufferTitle, TEXT("MC"));
d570 1
a570 1
					wsprintf(BufferTitle, TEXT("AutoMC"));
d614 1
a614 1
				wsprintf(BufferTitle, TEXT("ThermAll"),text);
d632 389
a1020 1
				wsprintf(BufferTitle, TEXT("Vario"),text);
d1036 7
a1042 4
			valid=true;
			wsprintf(BufferValue, TEXT("000"));
			wsprintf(BufferUnit, TEXT("e"));
			wsprintf(BufferTitle, TEXT("PrErr"));
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * $Id$
d83 2
a84 4
					if (DisplayMode != dmCircling)
					{
						value = CALCULATED_INFO.WaypointBearing;
						valid=true;
d86 6
a91 6
						if (value > 1)
							_stprintf(BufferValue, TEXT("%2.0f°"), value);
						else if (value < -1)
							_stprintf(BufferValue, TEXT("%2.0f°"), -value);
							else
								_tcscpy(BufferValue, TEXT("0°"));
d93 6
a98 6
						if (value > 1)
							_stprintf(BufferValue, TEXT("%2.0fÂ°"), value);
						else if (value < -1)
							_stprintf(BufferValue, TEXT("%2.0fÂ°"), -value);
							else
								_tcscpy(BufferValue, TEXT("0Â°"));
a99 1
					}
d264 1
d300 1
d356 1
a356 1
				wsprintf(BufferTitle, TEXT("ThAll"),text);
d358 1
a358 1
				wsprintf(BufferTitle, TEXT("ThAll"),text);
d380 60
d448 3
a450 3
			wsprintf(BufferValue, TEXT("0000"));
			wsprintf(BufferUnit, TEXT("E"));
			wsprintf(BufferTitle, TEXT("Error"));
d454 3
a456 3
			wsprintf(BufferValue, TEXT("1234"));
			wsprintf(BufferUnit, TEXT("ve"));
			wsprintf(BufferTitle, TEXT("FVError"));
@
