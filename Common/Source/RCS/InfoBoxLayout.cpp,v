head	8.4;
access;
symbols
	beta8:8.1;
locks
	root:8.4; strict;
comment	@// @;


8.4
date	2010.12.11.00.28.41;	author root;	state Exp;
branches;
next	8.3;

8.3
date	2009.11.20.15.40.18;	author root;	state Exp;
branches;
next	8.2;

8.2
date	2009.11.18.00.14.58;	author root;	state Exp;
branches;
next	8.1;

8.1
date	2009.06.19.20.28.25;	author venta;	state Exp;
branches;
next	;


desc
@none
@


8.4
log
@*** empty log message ***
@
text
@/*
   LK8000 Tactical Flight Computer -  WWW.LK8000.IT
   Released under GNU/GPL License v.2
   See CREDITS.TXT file for authors and copyrights

  $Id: InfoBoxLayout.cpp,v 8.3 2009/11/20 15:40:18 root Exp root $
*/

#include "StdAfx.h"
#include "Sizes.h"
#include "MapWindow.h"
#include "InfoBoxLayout.h"
#include "Dialogs.h"
#include "Utils.h"
#include "externs.h"

#include "InfoBox.h"
#include "XCSoar.h" // 091117

extern InfoBox *InfoBoxes[MAXINFOWINDOWS];
extern HWND hWndMainWindow; // Main Windows
extern HINSTANCE hInst; // The current instance

// Layouts:
// 0: default, infoboxes along top and bottom, map in middle
// 1: both infoboxes along bottom
// 2: both infoboxes along top
// 3: infoboxes along both sides
// 4: infoboxes along left side
// 5: infoboxes along right side
// 6: infoboxes GNAV
/*

Screen 
640x480 landscape

480/6 = 80 control height

2/3 of width is map = 420
leaving 220 = 110 control width

*/


/*

Button 0 (x,y,sx,sy)
Button 1 (x,y,sx,sy)
...

InfoBox 0 (x,y,sx,sy)

*/


int InfoBoxLayout::InfoBoxGeometry = 0;
int InfoBoxLayout::ControlWidth;
int InfoBoxLayout::ControlHeight;
int InfoBoxLayout::TitleHeight;
int InfoBoxLayout::scale = 1;
double InfoBoxLayout::dscale=1.0;
bool InfoBoxLayout::IntScaleFlag=false;

bool gnav = false;

bool geometrychanged = false;

bool InfoBoxLayout::landscape = false;
bool InfoBoxLayout::square = false;
bool InfoBoxLayout::fullscreen = false;

void InfoBoxLayout::GetInfoBoxPosition(int i, RECT rc, 
				       int *x, int *y,
				       int *sizex, int *sizey) {
  TCHAR reggeompx[50];
  TCHAR reggeompy[50];
  TCHAR reggeomsx[50];
  TCHAR reggeomsy[50];
  DWORD Temp=0;

  wsprintf(reggeompx, TEXT("InfoBoxPositionPosX%d"), i);
  wsprintf(reggeompy, TEXT("InfoBoxPositionPosY%d"), i);
  wsprintf(reggeomsx, TEXT("InfoBoxPositionSizeX%d"), i);
  wsprintf(reggeomsy, TEXT("InfoBoxPositionSizeY%d"), i);

  GetFromRegistry(reggeompx,&Temp); *x = Temp;
  GetFromRegistry(reggeompy,&Temp); *y = Temp;
  GetFromRegistry(reggeomsx,&Temp); *sizex = Temp;
  GetFromRegistry(reggeomsy,&Temp); *sizey = Temp;

  if (*sizey != ControlHeight) {
    geometrychanged = true;
  }
  if (*sizex != ControlWidth) {
    geometrychanged = true;
  }

  if ((*sizex==0)||(*sizey==0)||geometrychanged) {
    // not defined in registry so go with defaults
    // these will be saved back to registry

    switch (InfoBoxGeometry) {
    case 0:
      if (i<numInfoWindows/2) {
	*x = i*ControlWidth;
	*y = rc.top;
      } else {
	*x = (i-numInfoWindows/2)*ControlWidth;
	*y = rc.bottom-ControlHeight;
      }
      break;
    case 1:
      if (i<numInfoWindows/2) {
	*x = i*ControlWidth;
	*y = rc.bottom-ControlHeight*2;
      } else {
	*x = (i-numInfoWindows/2)*ControlWidth;
	*y = rc.bottom-ControlHeight;
      }
      break;
    case 2:
      if (i<numInfoWindows/2) {
	*x = i*ControlWidth;
	*y = rc.top;;
      } else {
	*x = (i-numInfoWindows/2)*ControlWidth;
	*y = rc.top+ControlHeight;
      }
      break;
      
    case 3:
      if (i<numInfoWindows/2) {
	*x = rc.left;
	*y = rc.top+ControlHeight*i;
      } else {
	*x = rc.right-ControlWidth;
	*y = rc.top+ControlHeight*(i-numInfoWindows/2);
      }
      break;
    case 4:
      if (i<numInfoWindows/2) {
	*x = rc.left;
	*y = rc.top+ControlHeight*i;
      } else {
	*x = rc.left+ControlWidth;
	*y = rc.top+ControlHeight*(i-numInfoWindows/2);
      }
      break;
    case 5:
      if (i<numInfoWindows/2) {
	*x = rc.right-ControlWidth*2;
	*y = rc.top+ControlHeight*i;
      } else {
	*x = rc.right-ControlWidth;
	*y = rc.top+ControlHeight*(i-numInfoWindows/2);
      }
      break;
    case 6:
      if (i<3) {
	*x = rc.right-ControlWidth*2;
	*y = rc.top+ControlHeight*i;
      } else {
	if (i<6) {
	  *x = rc.right-ControlWidth*2;
	  *y = rc.top+ControlHeight*(i-3)+ControlHeight*3;
	} else {
	  *x = rc.right-ControlWidth;
	  *y = rc.top+ControlHeight*(i-6)+ControlHeight*3;
	}
      }
      break;
    case 7:
      *x = rc.right-ControlWidth;
      *y = rc.top+ControlHeight*i;
      break;
    };

    *sizex = ControlWidth;
    *sizey = ControlHeight;

    SetToRegistry(reggeompx,*x);
    SetToRegistry(reggeompy,*y);
    SetToRegistry(reggeomsx,*sizex);
    SetToRegistry(reggeomsy,*sizey);

  };
}


//
// Paolo Ventafridda, VENTA-ADDON Geometry change in Config menu 11
//
void InfoBoxLayout::ScreenGeometry(RECT rc) {

  TCHAR szRegistryInfoBoxGeometry[]=  TEXT("InfoBoxGeometry");
  TCHAR szRegistryInfoBoxGeom[]=  TEXT("AppInfoBoxGeom"); 

  DWORD Temp=0;
  GetFromRegistry(szRegistryInfoBoxGeometry,&Temp);
  InfoBoxGeometry = Temp;

#if defined(PNA) || defined(FIVV)
// VENTA-ADDON GEOM
  GetFromRegistry(szRegistryInfoBoxGeom,&Temp);
  if ((unsigned)InfoBoxGeometry != Temp) {
    StartupStore(_T(". Geometry was changed in config, applying%s"),NEWLINE);
    InfoBoxGeometry=Temp;
  }
#endif

  // JMW testing only
  geometrychanged = true;

  int maxsize=0;
  int minsize=0;
  maxsize = max(rc.right-rc.left,rc.bottom-rc.top);
  minsize = min(rc.right-rc.left,rc.bottom-rc.top);

  dscale = max(1,minsize/240.0); // always start w/ shortest dimension

  if (maxsize == minsize)  // square should be shrunk
  {
    dscale *= 240.0 / 320.0;  
  }

  scale = (int)dscale;
  if ( ((double)scale) == dscale)
    IntScaleFlag=true;
  else
    IntScaleFlag=false;

  #if (WINDOWSPC>0)
  if (maxsize==720) {
	scale=2; // force rescaling with Stretch
  }
  #endif

#ifdef NEWIBLSCALE
  int i;
  if (IntScaleFlag) {
  	for (i=0; i<=MAXIBLSCALE; i++) LKIBLSCALE[i]=(int)(i*scale);
  } else {
  	for (i=0; i<=MAXIBLSCALE;i++) LKIBLSCALE[i]=(int)(i*dscale);
  }
#endif

  if (rc.bottom<rc.right) {
    // landscape mode
    landscape = true;
    if (InfoBoxGeometry<4) {
      geometrychanged = true;

      // JMW testing
      // VENTA 090814 warning, we are forcing geom 6 for landscape mode if geom previously <4
      if (1) {
	// we set default to 0, top+bottom in portrait, and in this case it becomes 7 for landscape (5 in the right)
	InfoBoxGeometry = 7; // 091105
      } else {
	InfoBoxGeometry+= 3;
      }
    }

  } else if (rc.bottom==rc.right) {
    landscape = false;
    square = true;
    if (InfoBoxGeometry<7) {
      geometrychanged = true;
    }
    InfoBoxGeometry = 7;

  } else {
    landscape = false;
    // portrait mode
    gnav = false;
    if (InfoBoxGeometry>=3) {
      InfoBoxGeometry= 0;

      geometrychanged = true;
    }
  }

  SetToRegistry(szRegistryInfoBoxGeometry,InfoBoxGeometry);

  // JMW testing
  if (InfoBoxGeometry==6) {
    gnav = true;
  }

  if (gnav) {
    numInfoWindows = 9;
  } else if (square) {
    numInfoWindows = 5;
  } else {
    numInfoWindows = 8;
  }
}


void InfoBoxLayout::GetInfoBoxSizes(RECT rc) {

  switch (InfoBoxGeometry) {
  case 0: // portrait
    // calculate control dimensions
    ControlWidth = 2*(rc.right - rc.left) / numInfoWindows;
    ControlHeight = (int)((rc.bottom - rc.top) / CONTROLHEIGHTRATIO);
    TitleHeight = (int)(ControlHeight/TITLEHEIGHTRATIO); 
    
    // calculate small map screen size
    
    MapWindow::MapRect.top = rc.top+ControlHeight;
    MapWindow::MapRect.left = rc.left;
    MapWindow::MapRect.bottom = rc.bottom-ControlHeight;
    MapWindow::MapRect.right = rc.right;
    break;

  case 1: // not used
    // calculate control dimensions
    
    ControlWidth = 2*(rc.right - rc.left) / numInfoWindows;
    ControlHeight = (int)((rc.bottom - rc.top) / CONTROLHEIGHTRATIO);
    TitleHeight = (int)(ControlHeight/TITLEHEIGHTRATIO); 
    
    // calculate small map screen size
    
    MapWindow::MapRect.top = rc.top;
    MapWindow::MapRect.left = rc.left;
    MapWindow::MapRect.bottom = rc.bottom-ControlHeight*2;
    MapWindow::MapRect.right = rc.right;
    break;

  case 2: // not used
    // calculate control dimensions
    
    ControlWidth = 2*(rc.right - rc.left) / numInfoWindows;
    ControlHeight = (int)((rc.bottom - rc.top) / CONTROLHEIGHTRATIO);
    TitleHeight = (int)(ControlHeight/TITLEHEIGHTRATIO); 
    
    // calculate small map screen size
    
    MapWindow::MapRect.top = rc.top+ControlHeight*2;
    MapWindow::MapRect.left = rc.left;
    MapWindow::MapRect.bottom = rc.bottom;
    MapWindow::MapRect.right = rc.right;
    break;

  case 3: // not used
    // calculate control dimensions
    
    ControlWidth = (int)((rc.right - rc.left) / CONTROLHEIGHTRATIO*1.3);
    ControlHeight = (int)(2*(rc.bottom - rc.top) / numInfoWindows);
    TitleHeight = (int)(ControlHeight/TITLEHEIGHTRATIO); 
    
    // calculate small map screen size
    
    MapWindow::MapRect.top = rc.top;
    MapWindow::MapRect.left = rc.left+ControlWidth;
    MapWindow::MapRect.bottom = rc.bottom;
    MapWindow::MapRect.right = rc.right-ControlWidth;
    break;

  case 4:
    // calculate control dimensions
    
    ControlWidth = (int)((rc.right - rc.left) / CONTROLHEIGHTRATIO*1.3);
    ControlHeight = (int)(2*(rc.bottom - rc.top) / numInfoWindows);
    TitleHeight = (int)(ControlHeight/TITLEHEIGHTRATIO); 
    
    // calculate small map screen size
    
    MapWindow::MapRect.top = rc.top;
    MapWindow::MapRect.left = rc.left+ControlWidth*2;
    MapWindow::MapRect.bottom = rc.bottom;
    MapWindow::MapRect.right = rc.right;
    break;

  case 5: // not used
    // calculate control dimensions
    
    ControlWidth = (int)((rc.right - rc.left) / CONTROLHEIGHTRATIO*1.3);
    ControlHeight = (int)(2*(rc.bottom - rc.top) / numInfoWindows);
    TitleHeight = (int)(ControlHeight/TITLEHEIGHTRATIO); 
    
    // calculate small map screen size
    
    MapWindow::MapRect.top = rc.top;
    MapWindow::MapRect.left = rc.left;
    MapWindow::MapRect.bottom = rc.bottom;
    MapWindow::MapRect.right = rc.right-ControlWidth*2;
    break;

  case 6: // landscape
    // calculate control dimensions
    
    ControlHeight = (int)((rc.bottom - rc.top)/6);
    ControlWidth=(int)(ControlHeight*1.44); // preserve relative shape
    TitleHeight = (int)(ControlHeight/TITLEHEIGHTRATIO); 
    
    // calculate small map screen size
    
    MapWindow::MapRect.top = rc.top;
    MapWindow::MapRect.left = rc.left;
    MapWindow::MapRect.bottom = rc.bottom;
    MapWindow::MapRect.right = rc.right-ControlWidth*2;

    break;

  case 7: // square
    // calculate control dimensions
    
    ControlWidth = (int)((rc.right - rc.left)*0.2);
    ControlHeight = (int)((rc.bottom - rc.top)/5);
    TitleHeight = (int)(ControlHeight/TITLEHEIGHTRATIO); 
    
    // calculate small map screen size
    
    MapWindow::MapRect.top = rc.top;
    MapWindow::MapRect.left = rc.left;
    MapWindow::MapRect.bottom = rc.bottom;
    MapWindow::MapRect.right = rc.right-ControlWidth;

    break;
  };

}


void InfoBoxLayout::Paint(void) {
  int i;
  for (i=0; i<numInfoWindows; i++) 
    InfoBoxes[i]->Paint();

  if (!fullscreen) {
    InfoBoxes[numInfoWindows]->SetVisible(false);
    for (i=0; i<numInfoWindows; i++) 
      InfoBoxes[i]->PaintFast();
  } else {
    InfoBoxes[numInfoWindows]->SetVisible(true);
    for (i=0; i<numInfoWindows; i++) {
      int x, y;
      int rx, ry;
      int rw;
      int rh;
      double fw, fh;
      if (landscape) {
        rw = 84;
        rh = 68;
      } else {
        rw = 120;
        rh = 80;
      }
      fw = rw/(double)ControlWidth;
      fh = rh/(double)ControlHeight;
      double f = min(fw, fh);
      rw = (int)(f*ControlWidth);
      rh = (int)(f*ControlHeight);

      if (landscape) {
        rx = i % 3;
        ry = i / 3;

        x = (rw+4)*rx;
        y = (rh+3)*ry;

      } else {
        rx = i % 2;
        ry = i / 4;

        x = (rw)*rx;
        y = (rh)*ry;

      }
      InfoBoxes[i]->PaintInto(InfoBoxes[numInfoWindows]->GetHdcBuf(), 
                              IBLSCALE(x), IBLSCALE(y), IBLSCALE(rw), IBLSCALE(rh));
    }
    InfoBoxes[numInfoWindows]->PaintFast();
  }
}


void InfoBoxLayout::CreateInfoBoxes(RECT rc) {
  int i;
  int xoff, yoff, sizex, sizey;

  GetInfoBoxSizes(rc);

  // JMW created full screen infobox mode
  xoff=0;
  yoff=0;
  sizex=rc.right-rc.left;
  sizey=rc.bottom-rc.top;

  InfoBoxes[numInfoWindows] = new InfoBox(hWndMainWindow, xoff, yoff, sizex, sizey);
  InfoBoxes[numInfoWindows]->SetBorderKind(0);

  // create infobox windows

  for(i=0;i<numInfoWindows;i++)
    {
      GetInfoBoxPosition(i, rc, &xoff, &yoff, &sizex, &sizey);

      InfoBoxes[i] = new InfoBox(hWndMainWindow, xoff, yoff, sizex, sizey);

      int Border=0;
      if (gnav){
        if (i>0)
          Border |= BORDERTOP;
        if (i<6)
          Border |= BORDERRIGHT;
        InfoBoxes[i]->SetBorderKind(Border);
      } else
      if (!landscape) {
        Border = 0;
        if (i<4) {
          Border |= BORDERBOTTOM;
        } else {
          Border |= BORDERTOP;
        }
        Border |= BORDERRIGHT;
        InfoBoxes[i]->SetBorderKind(Border);
      }
    }

}

void InfoBoxLayout::DestroyInfoBoxes(void){
  int i;
  for(i=0; i<numInfoWindows+1; i++){
    delete (InfoBoxes[i]);
  }

}

HWND ButtonLabel::hWndButtonWindow[NUMBUTTONLABELS];
bool ButtonLabel::ButtonVisible[NUMBUTTONLABELS];
bool ButtonLabel::ButtonDisabled[NUMBUTTONLABELS];

int ButtonLabel::ButtonLabelGeometry = 0; 


void ButtonLabel::GetButtonPosition(int i, RECT rc,
				    int *x, int *y,
				    int *sizex, int *sizey) {

  TCHAR reggeompx[50];
  TCHAR reggeompy[50];
  TCHAR reggeomsx[50];
  TCHAR reggeomsy[50];
  DWORD Temp=0;

  wsprintf(reggeompx, TEXT("ScreenButtonPosX%d"), i);
  wsprintf(reggeompy, TEXT("ScreenButtonPosY%d"), i);
  wsprintf(reggeomsx, TEXT("ScreenButtonSizeX%d"), i);
  wsprintf(reggeomsy, TEXT("ScreenButtonSizeY%d"), i);

  GetFromRegistry(reggeompx,&Temp); *x = Temp;
  GetFromRegistry(reggeompy,&Temp); *y = Temp;
  GetFromRegistry(reggeomsx,&Temp); *sizex = Temp;
  GetFromRegistry(reggeomsy,&Temp); *sizey = Temp;

  if ((*sizex==0)||(*sizey==0)||geometrychanged) {
    // not defined in registry so go with defaults
    // these will be saved back to registry
    int hwidth = (rc.right-rc.left)/4;
    int hheight = (rc.bottom-rc.top)/4;


    switch (ButtonLabelGeometry) {

	case 0: // PORTRAIT MODE ONLY

		if (i==0) {
			*sizex = NIBLSCALE(52);
			*sizey = NIBLSCALE(37);
			*x = rc.left-(*sizex); // JMW make it offscreen for now
			*y = (rc.bottom-(*sizey));
		} else {
			if (i<5) {
				// BOTTOM MENU NAV INFO CONFIG DISPLAY
				//*sizex = NIBLSCALE(52);
				//*sizey = NIBLSCALE(40);
				*sizex = NIBLSCALE(57);
				*sizey = NIBLSCALE(45);
				*x = rc.left+2+hwidth*(i-1);
				*y = (rc.bottom-(*sizey)-NIBLSCALE(2));
			} else {
				*sizex = NIBLSCALE(80);
				*sizey = NIBLSCALE(40);
				*x = rc.right-(*sizex);
				int k = rc.bottom-rc.top-NIBLSCALE(46); 

				#ifdef GNAV
				k = rc.bottom-rc.top; 
				// JMW need upside down button order for rotated Altair
				*y = rc.bottom-(i-5)*k/5-(*sizey)-NIBLSCALE(20);
				#else
				*y = (rc.top+(i-5)*k/6+(*sizey/2+NIBLSCALE(3)));
				#endif
			}
		}
		break;

	case 1: // LANDSCAPE MODE ONLY

		hwidth = (rc.right-rc.left)/5;
		hheight = (rc.bottom-rc.top)/(5);

		int hoffset, voffset;

		// menu buttons 0-4
		// LEFT menu 0 is unused
		if (i==0) {
			*sizex = NIBLSCALE(52);
			*sizey = NIBLSCALE(20);
			*x = rc.left-(*sizex); // JMW make it offscreen for now
			*y = (rc.top);
		} else {
			if (i<5) {
				// RIGHT menu items ( NAV DISPLAY CONFIG INFO ... )
				// new buttons landscape on the right 
				switch(ScreenSize) {
					case ss800x480:
						*sizex = NIBLSCALE(75);
						*sizey = 78;
						voffset= 40;
						// offset distance from right margin
						hoffset=*sizex+5;
						break;
					case ss640x480:
						*sizex = NIBLSCALE(60);
						*sizey = 72-2;
						voffset= 40;
						hoffset=*sizex+3;
						break;
					case ss480x272:
						*sizex = NIBLSCALE(77);
						*sizey = 48-1;
						voffset= 26; 
						hoffset=*sizex+3;
						break;
					case ss480x234:
						*sizex = NIBLSCALE(82);
						*sizey = 41-1;
						voffset= 20;
						hoffset=*sizex+5;
						break;
					case ss320x240:
						*sizex = NIBLSCALE(58);
						*sizey = 34-1;
						voffset= 16;
						hoffset=*sizex+1;
						break;
					case ss400x240:
						*sizex = NIBLSCALE(75);
						*sizey = 39;
						voffset= 20;
						hoffset=*sizex+2;
						break;
#if (WINDOWSPC>0)
					case ss720x408:
						*sizex = NIBLSCALE(77); // watch out MAXIBLSCALE
						*sizey = 72-1;
						voffset= 39;
						hoffset=*sizex+3;
						break;
					case ss896x672:
						*sizex = NIBLSCALE(60);
						*sizey = 100-2;
						voffset= 56;
						hoffset=*sizex+4;
						break;
#endif
					default:
						*sizex = NIBLSCALE(58);
						*sizey = NIBLSCALE(40);
						voffset=0;
						hoffset=*sizex+5;
						break;
				}
				//*x = rc.right-3-*sizex;	
				//*y = (rc.top+hheight*i-(*sizey)/2)-(*sizey/2);
				*x = rc.right-3-hoffset;	
				*y = (rc.top+hheight*i-(*sizey)/2)-voffset;
			} else {
				// BOTTOM MENUS

				// warning, these values are a copy of those in Utils2, inside InitNewMap.
				// Since that function has not been called yet when we are here, we need to load them manually.
				// In any case, even changing those values, only cosmetic issue is rised.
				switch(ScreenSize) {
					case ss800x480:
						*sizex = NIBLSCALE(78);
						*sizey = 80-2;
						hoffset=NIBLSCALE(1);
						// distance from bottom
						voffset=1;
						break;
					case ss640x480:
						*sizex = NIBLSCALE(62);
						*sizey = 72-2;
						hoffset= 2;
						voffset=1;
						break;
					case ss480x272:
						*sizex = NIBLSCALE(82);
						*sizey = 48-1;
						hoffset= 2;
						voffset=1;
						break;
					case ss480x234:
						*sizex = NIBLSCALE(86);
						*sizey = 41-1;
						hoffset= 5;
						voffset=1;
						break;
					case ss320x240:
						*sizex = NIBLSCALE(60);
						*sizey = 34-1;
						hoffset= 2;
						voffset=1;
						break;
					case ss400x240:
						*sizex = NIBLSCALE(78);
						*sizey = 40-1;
						hoffset=NIBLSCALE(1);
						// distance from bottom
						voffset=1;
						break;
#if (WINDOWSPC>0)
					case ss720x408:
						*sizex = NIBLSCALE(82);
						*sizey = 72-1;
						hoffset= 2;
						voffset=1;
						break;
					case ss896x672:
						*sizex = NIBLSCALE(62);
						*sizey = 100-2;
						hoffset= 2;
						voffset=1;
						break;
#endif
					default:
						*sizex = NIBLSCALE(58);
						*sizey = NIBLSCALE(40);
						hoffset=0;
						voffset=1;
						break;
				}
				*x = rc.left+hwidth*(i-5)+ hoffset;
				*y = (rc.bottom-(*sizey))- voffset; 
			}
		}
		break;

	} 

    SetToRegistry(reggeompx,*x);
    SetToRegistry(reggeompy,*y);
    SetToRegistry(reggeomsx,*sizex);
    SetToRegistry(reggeomsy,*sizey);

  };

}


void ButtonLabel::CreateButtonLabels(RECT rc) {
  int i;
  int x, y, xsize, ysize;

  int buttonWidth = NIBLSCALE(50);
  int buttonHeight = NIBLSCALE(15);

  // set geometry for button correctly
  if (ScreenSize > (ScreenSize_t)sslandscape)
	ButtonLabelGeometry = 1; 
  else
	ButtonLabelGeometry = 0; 

  for (i=0; i<NUMBUTTONLABELS; i++) {
#ifdef PNA 
 if (GlobalModelType == MODELTYPE_PNA_HP31X )
    hWndButtonWindow[i] =
      CreateWindowEx( WS_EX_CLIENTEDGE,
		   TEXT("STATIC"), TEXT("\0"),
		   WS_CHILD|WS_TABSTOP
		   |SS_CENTER|SS_NOTIFY
		   |WS_CLIPCHILDREN | WS_CLIPSIBLINGS | WS_BORDER,
		   rc.left, rc.top, 
		   buttonWidth, buttonHeight,
		   hWndMainWindow, NULL, hInst, NULL);
 else
    hWndButtonWindow[i] =
      CreateWindow(
		   TEXT("STATIC"), TEXT("\0"),
		   /*WS_VISIBLE|*/ WS_CHILD|WS_TABSTOP
		   |SS_CENTER|SS_NOTIFY
		   |WS_CLIPCHILDREN | WS_CLIPSIBLINGS | WS_BORDER,
		   rc.left, rc.top, 
		   // TODO code: need to have these passed in too as
		   // some buttons may actually be a different shape.
		   buttonWidth, buttonHeight,
		   hWndMainWindow, NULL, hInst, NULL);

#else
    hWndButtonWindow[i] =
      CreateWindow(
		   TEXT("STATIC"), TEXT("\0"),
		   /*WS_VISIBLE|*/ WS_CHILD|WS_TABSTOP
		   |SS_CENTER|SS_NOTIFY
		   |WS_CLIPCHILDREN | WS_CLIPSIBLINGS | WS_BORDER,
		   rc.left, rc.top, 
		   // TODO code: need to have these passed in too as
		   // some buttons may actually be a different shape.
		   buttonWidth, buttonHeight,
		   hWndMainWindow, NULL, hInst, NULL);
#endif

    GetButtonPosition(i, rc, &x, &y, &xsize, &ysize);

    SetWindowPos(hWndButtonWindow[i],HWND_TOP,
		 x, y,
		 xsize, ysize, SWP_SHOWWINDOW);
    ButtonVisible[i]= true;
    ButtonDisabled[i]= false;

    SetLabelText(i,NULL);
    SetWindowLong(hWndButtonWindow[i], GWL_USERDATA, 4);	  
  }

  // 

// VENTA3 disable gauge vario for geometry 5 in landscape mode, use 8 box right instead
// beside those boxes were painted and overwritten by the gauge already and gauge was 
// graphically too much stretched, requiring a restyle!
  if (gnav) {
      if ( ( InfoBoxLayout::landscape == true) && ( InfoBoxLayout::InfoBoxGeometry == 5 ) )
      	EnableVarioGauge = false;
      else
      	EnableVarioGauge = true; 
  } else {
    EnableVarioGauge = false;
  }

}

void ButtonLabel::SetFont(HFONT Font) {
  int i;
  for (i=0; i<NUMBUTTONLABELS; i++) {
    SendMessage(hWndButtonWindow[i], WM_SETFONT,
              (WPARAM)Font, MAKELPARAM(TRUE,0));
  }
}


void ButtonLabel::Destroy() {
  int i;
  for (i=0; i<NUMBUTTONLABELS; i++) {
    DestroyWindow(hWndButtonWindow[i]);

    // prevent setting of button details if it's been destroyed
    hWndButtonWindow[i] = NULL;
    ButtonVisible[i]= false;
    ButtonDisabled[i] = true;
  }
}


void ButtonLabel::SetLabelText(int index, const TCHAR *text) {
  // error! TODO enhancement: Add debugging
  if (index>= NUMBUTTONLABELS) 
    return;

  // don't try to draw if window isn't initialised
  if (hWndButtonWindow[index] == NULL)
    return;

  if ((text==NULL) || (*text==_T('\0'))||(*text==_T(' '))) {
    ShowWindow(hWndButtonWindow[index], SW_HIDE);
    ButtonVisible[index]= false;
  } else {

    TCHAR s[100];

    bool greyed = ExpandMacros(text, s, sizeof(s)/sizeof(s[0]));

    if (greyed) {
      SetWindowLong(hWndButtonWindow[index], GWL_USERDATA, 5);
      ButtonDisabled[index]= true;
    } else {
      SetWindowLong(hWndButtonWindow[index], GWL_USERDATA, 4);
      ButtonDisabled[index]= false;
    }

    if ((s[0]==_T('\0'))||(s[0]==_T(' '))) {
      ShowWindow(hWndButtonWindow[index], SW_HIDE);
      ButtonVisible[index]= false;
    } else {
      
      SetWindowText(hWndButtonWindow[index], gettext(s));
      
      SetWindowPos(hWndButtonWindow[index], HWND_TOP, 0,0,0,0,
                   SWP_NOMOVE | SWP_NOSIZE);

      ShowWindow(hWndButtonWindow[index], SW_SHOW);
      ButtonVisible[index]= true;
    }
  }

}

#include "InputEvents.h"

bool ButtonLabel::CheckButtonPress(HWND pressedwindow) {
  int i;

  for (i=0; i<NUMBUTTONLABELS; i++) {
    if (hWndButtonWindow[i]== pressedwindow) {
      if (!ButtonDisabled[i]) {
        InputEvents::processButton(i);
        return TRUE;
      } else {
        return FALSE;
      }
      return FALSE;
    }
  }
  return FALSE;
}


void ButtonLabel::AnimateButton(int i) {
  RECT mRc, aniRect;
  GetWindowRect(hWndButtonWindow[i], &mRc);
  
  if (ButtonVisible[i]) {
    aniRect.top = (mRc.top*5+mRc.bottom)/6;
    aniRect.left = (mRc.left*5+mRc.right)/6;
    aniRect.right = (mRc.left+mRc.right*5)/6;
    aniRect.bottom = (mRc.top+mRc.bottom*5)/6;
    SetSourceRectangle(aniRect);
    DrawWireRects(&mRc, 5);
  }
  
  SetSourceRectangle(mRc);

}
@


8.3
log
@117c
@
text
@d2 3
a4 1
Copyright_License {
d6 2
a7 29
  XCSoar Glide Computer - http://xcsoar.sourceforge.net/
  Copyright (C) 2000 - 2008  

  	M Roberts (original release)
	Robin Birch <robinb@@ruffnready.co.uk>
	Samuel Gisiger <samuel.gisiger@@triadis.ch>
	Jeff Goodenough <jeff@@enborne.f2s.com>
	Alastair Harrison <aharrison@@magic.force9.co.uk>
	Scott Penrose <scottp@@dd.com.au>
	John Wharington <jwharington@@gmail.com>
	Lars H <lars_hn@@hotmail.com>
	Rob Dunning <rob@@raspberryridgesheepfarm.com>
	Russell King <rmk@@arm.linux.org.uk>
	Paolo Ventafridda <coolwind@@email.it>
	Tobias Lohner <tobias@@lohner-net.de>

  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public License
  as published by the Free Software Foundation; either version 2
  of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
a8 3
  $Id: InfoBoxLayout.cpp,v 8.2 2009/11/18 00:14:58 root Exp root $
}
*/
d206 1
a206 1
    StartupStore(_T(". Geometry was changed in config, applying\n"));
d232 15
d256 1
a256 2
	///: InfoBoxGeometry = 6; 091105 
	///: we set default to 0, top+bottom in portrait, and in this case it becomes 7 for landscape (5 in the right)
a532 2
///////////////////////

d569 32
a600 1
    case 0: // PORTRAIT MODE ONLY
d602 1
a602 26
      if (i==0) {
	*sizex = IBLSCALE(52);
	*sizey = IBLSCALE(37);
	*x = rc.left-(*sizex); // JMW make it offscreen for now
	*y = (rc.bottom-(*sizey));
      } else {
        if (i<5) {
          *sizex = IBLSCALE(52);
          *sizey = IBLSCALE(40);
          *x = rc.left+3+hwidth*(i-1);
          *y = (rc.bottom-(*sizey));
        } else {
          *sizex = IBLSCALE(80);
          *sizey = IBLSCALE(40);
          *x = rc.right-(*sizex);
          int k = rc.bottom-rc.top-IBLSCALE(46); 
#ifdef GNAV
          k = rc.bottom-rc.top; 
          // JMW need upside down button order for rotated Altair
          *y = rc.bottom-(i-5)*k/5-(*sizey)-IBLSCALE(20);
#else
          *y = (rc.top+(i-5)*k/6+(*sizey/2+IBLSCALE(3)));
#endif
        }
      }
      break;
d604 2
a605 1
    case 1: // LANDSCAPE MODE ONLY
d607 1
a607 2
      hwidth = (rc.right-rc.left)/5;
      hheight = (rc.bottom-rc.top)/(4+1);
d609 62
a670 14
      if (i==0) {
	*sizex = IBLSCALE(52);
	*sizey = IBLSCALE(20);
	*x = rc.left-(*sizex); // JMW make it offscreen for now
	*y = (rc.top);
      } else {
	///: LEFT menu items ( NAV DISPLAY CONFIG INFO ... )
	if (i<5) {
	  *sizex = IBLSCALE(52);
/* 091117
#ifdef GNAV
	  *sizey = IBLSCALE(20);
#else
	  *sizey = IBLSCALE(35);
d672 69
a740 12
*/
	  *sizey = IBLSCALE(23); // 091117
	  *x = rc.left+3;
	  *y = (rc.top+hheight*i-(*sizey)/2);
	} else {
	///: BOTTOM MENUS
	  *sizex = IBLSCALE(60);
/* 091117
#ifdef GNAV
	  *sizey = IBLSCALE(40);
#else
	  *sizey = IBLSCALE(35);
d742 10
a751 23
*/
		///: 091117 warning, these values are a copy of those in Utils2, inside InitNewMap.
		///: Since that function has not been called yet when we are here, we need to load them manually.
		///: In any case, even changing those values, only cosmetic issue is rised.
		switch(ScreenSize) {
			case ss800x480:
	  			*sizey = 80;
				break;
			case ss640x480:
	  			*sizey = 72;
				break;
			case ss480x272:
	  			*sizey = 48;
				break;
			case ss480x234:
	  			*sizey = 41;
				break;
			case ss320x240:
	  			*sizey = 34;
				break;
			default:
	  			*sizey = IBLSCALE(40);
				break;
d753 1
d755 1
a755 7
	  *x = rc.left+hwidth*(i-5);
	  *y = (rc.bottom-(*sizey));
	}
      }
      break;

    } 
d771 2
a772 2
  int buttonWidth = IBLSCALE(50);
  int buttonHeight = IBLSCALE(15);
d774 1
a774 8
/*
  if (gnav) {
    ButtonLabelGeometry = 1;
  } else {
    ButtonLabelGeometry = 0;
  }
*/
  ///: 091117 set geometry for button correctly
d781 1
a781 2
// VENTA3 added THICKFRAME
#ifdef PNA // VENTA3 FIX  better borders
d786 1
a786 1
		   WS_CHILD|WS_TABSTOP|WS_THICKFRAME
d916 1
@


8.2
log
@*** empty log message ***
@
text
@d34 1
a34 1
  $Id: InfoBoxLayout.cpp,v 8.1 2009/06/19 20:28:25 venta Exp root $
d46 1
d233 2
a234 2
  if (InfoBoxGeometry != Temp) {
    StartupStore(_T("Geometry was changed in config, applying\n"));
d582 1
d584 3
a586 1
    case 0: // portrait
d614 2
a615 1
    case 1: // landscape
d625 1
d628 1
d634 2
d639 1
d641 1
d647 25
d697 1
d703 6
@


8.1
log
@beta8
@
text
@d34 1
a34 1
  $Id: InfoBoxLayout.cpp,v 1.47 2009/05/23 01:25:10 jwharington Exp $
d266 1
d268 3
a270 1
	InfoBoxGeometry = 6;
@
