head	8.2;
access;
symbols
	beta8:8.1;
locks
	root:8.2; strict;
comment	@// @;


8.2
date	2010.03.29.10.07.07;	author root;	state Exp;
branches;
next	8.1;

8.1
date	2009.06.19.20.28.25;	author venta;	state Exp;
branches;
next	;


desc
@none
@


8.2
log
@*** empty log message ***
@
text
@/*
  Copyright_License {

  XCSoar Glide Computer - http://xcsoar.sourceforge.net/
  Copyright (C) 2000 - 2008  

  	M Roberts (original release)
	Robin Birch <robinb@@ruffnready.co.uk>
	Samuel Gisiger <samuel.gisiger@@triadis.ch>
	Jeff Goodenough <jeff@@enborne.f2s.com>
	Alastair Harrison <aharrison@@magic.force9.co.uk>
	Scott Penrose <scottp@@dd.com.au>
	John Wharington <jwharington@@gmail.com>
	Lars H <lars_hn@@hotmail.com>
	Rob Dunning <rob@@raspberryridgesheepfarm.com>
	Russell King <rmk@@arm.linux.org.uk>

  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public License
  as published by the Free Software Foundation; either version 2
  of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

}
*/


#include "StdAfx.h"
#include <aygshell.h>

#include "XCSoar.h"

#include "externs.h"
#include "dlgTools.h"
#include "InfoBoxLayout.h"
#include "Utils.h"

#define MAXTITLE 200
#define MAXDETAILS 5000

static int page=0;
static WndForm *wf=NULL;
static WndListFrame *wDetails=NULL;
static WndOwnerDrawFrame *wDetailsEntry = NULL;

#define MAXLINES 100
#define MAXLISTS 20
//static int LineOffsets[MAXLINES];
static int DrawListIndex=0;
static int nTextLines=0;
//static int nLists=0;
//static TCHAR *ChecklistText[MAXLISTS];
//static TCHAR *ChecklistTitle[MAXLISTS];

static void Update(){

  //wDetails->ResetList();
  wDetails->Redraw();

}


static void OnPaintDetailsListItem(WindowControl * Sender, HDC hDC){
  (void)Sender;
  if (DrawListIndex < FLARM_MAX_TRAFFIC){
	TCHAR tmp[120];
	TCHAR text[120];

	double range;
	double bear;

	if (GPS_INFO.FLARM_Traffic[DrawListIndex].ID != 0) 
	{
		//LockFlightData();

		DistanceBearing(GPS_INFO.Latitude,
		    GPS_INFO.Longitude, 
		    GPS_INFO.FLARM_Traffic[DrawListIndex].Latitude,
		    GPS_INFO.FLARM_Traffic[DrawListIndex].Longitude,
		    &range,
		    &bear);

		#if 0
		_stprintf(tmp, TEXT("<%3s> %3.0fkmh %+2.1fm/s H%5.0fm"),	
		GPS_INFO.FLARM_Traffic[DrawListIndex].Name, 
		SPEEDMODIFY * GPS_INFO.FLARM_Traffic[DrawListIndex].Speed*3.6,

		#ifdef FLARM_AVERAGE
		LIFTMODIFY * GPS_INFO.FLARM_Traffic[DrawListIndex].Average30s,
		#else
		LIFTMODIFY * GPS_INFO.FLARM_Traffic[DrawListIndex].ClimbRate,
		#endif

		ALTITUDEMODIFY * GPS_INFO.FLARM_Traffic[DrawListIndex].Altitude
		);

		_stprintf(text, TEXT("%s @@%2.1fkm @@%2.0fdeg"), tmp, (DISTANCEMODIFY * range/1000), bear);

		int txtLen = wcslen(text);
		//if (txtLen>0 && GPS_INFO.FLARM_Traffic[DrawListIndex].ID != 0) 
		ExtTextOut(hDC, 2*InfoBoxLayout::scale, 2*InfoBoxLayout::scale, ETO_OPAQUE, NULL, text, txtLen, NULL);	  
		///: StartupStore(_T("... %s\n"),text); // REMOVE!

    		//UnlockFlightData();
		#else // 100308
		#ifdef FLARM_AVERAGE

		_stprintf(tmp, TEXT("%s %.0f%s %+.1f%s %.0f%sH"),	
			GPS_INFO.FLARM_Traffic[DrawListIndex].Name, 
			SPEEDMODIFY * GPS_INFO.FLARM_Traffic[DrawListIndex].Speed,
			Units::GetHorizontalSpeedName(),
			LIFTMODIFY * GPS_INFO.FLARM_Traffic[DrawListIndex].Average30s,
			Units::GetVerticalSpeedName(),
			ALTITUDEMODIFY*GPS_INFO.FLARM_Traffic[DrawListIndex].Altitude,
			Units::GetAltitudeName()
			);
		#else

		_stprintf(tmp, TEXT("<%s>  % 3.0fkm/h   %+ 1.1fm/s   %.0fmH"),	
			GPS_INFO.FLARM_Traffic[DrawListIndex].Name, 
			SPEEDMODIFY * GPS_INFO.FLARM_Traffic[DrawListIndex].Speed,
			LIFTMODIFY * GPS_INFO.FLARM_Traffic[DrawListIndex].ClimbRate,
			ALTITUDEMODIFY * GPS_INFO.FLARM_Traffic[DrawListIndex].Altitude);
		#endif

		_stprintf(text, TEXT("%s @@%2.1f%s %2.0f")TEXT(DEG), tmp, (DISTANCEMODIFY * range),
			Units::GetDistanceName(),
			 bear);
		switch (GPS_INFO.FLARM_Traffic[DrawListIndex].Status) {
			case LKT_GHOST:
				_tcscat(text,_T(" Ghost"));
				break;
			case LKT_ZOMBIE:
				_tcscat(text,_T(" Zombie"));
				break;
			case LKT_REAL:
			default:
				break;
		}

		int txtLen = wcslen(text);
		//if (txtLen>0 && GPS_INFO.FLARM_Traffic[DrawListIndex].ID != 0) 
		ExtTextOut(hDC, 2*InfoBoxLayout::scale, 2*InfoBoxLayout::scale, ETO_OPAQUE, NULL, text, txtLen, NULL);	  
		///: StartupStore(_T("... %s\n"),text); // REMOVE!

		#endif
	}
  }
}

int GetActiveFlarmTrafficCount()
{
  int count = 0;
  for (int i=0; i<FLARM_MAX_TRAFFIC; i++) 
    {
      if (GPS_INFO.FLARM_Traffic[i].ID!=0) 
	{
	  count++;
	}
    }
  return count;
}

static void OnDetailsListInfo(WindowControl * Sender, WndListFrame::ListInfo_t *ListInfo){
  (void)Sender;
  if (ListInfo->DrawIndex == -1){
    ListInfo->ItemCount = GetActiveFlarmTrafficCount();
  } else {
    DrawListIndex = ListInfo->DrawIndex+ListInfo->ScrollIndex;
    if (DrawListIndex != -1)
      {		
	if (GPS_INFO.FLARM_Traffic[DrawListIndex].ID != 0)
	  {
	    if (LookupFLARMDetails(GPS_INFO.FLARM_Traffic[DrawListIndex].ID) == NULL)			
	      {
		// not existing en primary or secondary flarm id list
		((WndButton *)wf->FindByName(TEXT("cmdSetCN")))->SetCaption(TEXT("Set CN"));
		((WndButton *)wf->FindByName(TEXT("cmdSetCN")))->SetVisible(true);	
	      }
	    else
	      {
		// the id was found - is it from secondary list ? 
		int index = LookupSecondaryFLARMId(GPS_INFO.FLARM_Traffic[DrawListIndex].ID);

		if (index != -1)
		  {
		    ((WndButton *)wf->FindByName(TEXT("cmdSetCN")))->SetCaption(TEXT("Edit CN"));
		    ((WndButton *)wf->FindByName(TEXT("cmdSetCN")))->SetVisible(true);
		  }
		else
		  {				
		    ((WndButton *)wf->FindByName(TEXT("cmdSetCN")))->SetVisible(false);
		  }
	      }
	    ((WndButton *)wf->FindByName(TEXT("cmdTrack")))->SetVisible(true);
	  }
	else
	  {
	    ((WndButton *)wf->FindByName(TEXT("cmdTrack")))->SetVisible(false);
	    ((WndButton *)wf->FindByName(TEXT("cmdSetCN")))->SetVisible(false);
	  }
      }
  }
}

void SelectAsTeamTrack()
{
  int index = wDetails->GetItemIndex();
  if (index != -1)
    {			
      if (GPS_INFO.FLARM_Traffic[index].Name[0] == 0) // 100322 TODO FIX use Cn
	{
	  TeamFlarmCNTarget[0] = 0;
	}
      else
	{
	  // copy the 3 first chars from the name
	  for (int z = 0; z < 3; z++)
	    {
	      TeamFlarmCNTarget[z] = GPS_INFO.FLARM_Traffic[index].Name[z];
	    }
	  TeamFlarmCNTarget[3] = 0;
	}
      // now tracking !
      TeamFlarmIdTarget = GPS_INFO.FLARM_Traffic[index].ID;
      TeamFlarmTracking = true;
      TeammateCodeValid = false;
    }
}

static void OnTrackClicked(WindowControl * Sender)
{
  (void)Sender;
  SelectAsTeamTrack();
  wf->SetModalResult(mrOK);
}

static void OnSetCNClicked(WindowControl * Sender)
{
  (void)Sender;

  int index = wDetails->GetItemIndex();
  if (index != -1)
    {		
      TCHAR newName[21];
      newName[0] = 0;
      dlgTextEntryShowModal(newName, 7); // 100322 raised from 3 to 6 (+1)

      AddFlarmLookupItem(GPS_INFO.FLARM_Traffic[index].ID, newName, true);
      GPS_INFO.FLARM_Traffic[index].UpdateNameFlag=true; // 100322
    }
}


static void OnCloseClicked(WindowControl * Sender){
  (void)Sender;
  wf->SetModalResult(mrOK);
}

static int FormKeyDown(WindowControl * Sender, WPARAM wParam, LPARAM lParam){
  (void)lParam;
  (void)Sender;
  switch(wParam & 0xffff){
  case VK_LEFT:
  case '6':
    SetFocus(((WndButton *)wf->FindByName(TEXT("cmdPrev")))->GetHandle());
    //      NextPage(-1);
    //((WndButton *)wf->FindByName(TEXT("cmdPrev")))->SetFocused(true, NULL);
    return(0);
  case VK_RIGHT:
  case '7':
    SetFocus(((WndButton *)wf->FindByName(TEXT("cmdNext")))->GetHandle());
    //      NextPage(+1);
    //((WndButton *)wf->FindByName(TEXT("cmdNext")))->SetFocused(true, NULL);
    return(0);
  }
  return(1);
}

static int OnTimerNotify(WindowControl * Sender) {
  (void)Sender;
  Update();
  return 0;
}

static void OnListEnter(WindowControl * Sender, 
			WndListFrame::ListInfo_t *ListInfo)
{
  SelectAsTeamTrack();
}

static CallBackTableEntry_t CallBackTable[]={
  DeclareCallBackEntry(OnTrackClicked),
  DeclareCallBackEntry(OnSetCNClicked),
  DeclareCallBackEntry(OnPaintDetailsListItem),
  DeclareCallBackEntry(OnDetailsListInfo),
  DeclareCallBackEntry(OnTimerNotify),
  DeclareCallBackEntry(NULL)
};






void dlgFlarmTrafficShowModal(void){
  static bool first=true;
  if (first) {

    first=false;
  }

  if (InfoBoxLayout::landscape) {
    char filename[MAX_PATH];
    LocalPathS(filename, TEXT("dlgFlarmTraffic_L.xml"));
    wf = dlgLoadFromXML(CallBackTable, 
			filename, 
			hWndMainWindow,
			TEXT("IDR_XML_FLARMTRAFFIC_L"));
  } else {
    char filename[MAX_PATH];
    LocalPathS(filename, TEXT("dlgFlarmTraffic.xml"));
    wf = dlgLoadFromXML(CallBackTable,                        
			filename, 
			hWndMainWindow,
			TEXT("IDR_XML_FLARMTRAFFIC"));
  }

  nTextLines = 0;

  if (!wf) return;

  wf->SetKeyDownNotify(FormKeyDown);

  ((WndButton *)wf->FindByName(TEXT("cmdClose")))->SetOnClickNotify(OnCloseClicked);

  wDetails = (WndListFrame*)wf->FindByName(TEXT("frmDetails"));
  wDetails->SetEnterCallback(OnListEnter);
  ASSERT(wDetails!=NULL);

  wDetailsEntry = 
    (WndOwnerDrawFrame*)wf->FindByName(TEXT("frmDetailsEntry"));
  ASSERT(wDetailsEntry!=NULL);
  wDetailsEntry->SetCanFocus(true);


  wDetails->SetBorderKind(BORDERLEFT);

  page = 0;

  wDetails->ResetList();
  Update();

  wf->SetTimerNotify(OnTimerNotify);

  wf->ShowModal();

  delete wf;

  wf = NULL;

}

@


8.1
log
@beta8
@
text
@d56 1
a56 1
static int LineOffsets[MAXLINES];
d59 3
a61 3
static int nLists=0;
static TCHAR *ChecklistText[MAXLISTS];
static TCHAR *ChecklistTitle[MAXLISTS];
d74 2
a75 2
    TCHAR tmp[100];
    TCHAR text[100];
d77 2
a78 2
    double range;
    double bear;
d80 3
a82 1
    LockFlightData();
d84 1
a84 1
    DistanceBearing(GPS_INFO.Latitude,
d91 65
a155 25
    wsprintf(tmp, TEXT("%3s %3ld %+3.1lf %5ld"),	
	     GPS_INFO.FLARM_Traffic[DrawListIndex].Name,
	     (int)(SPEEDMODIFY * GPS_INFO.FLARM_Traffic[DrawListIndex].Speed),
#ifdef FLARM_AVERAGE
	     LIFTMODIFY * GPS_INFO.FLARM_Traffic[DrawListIndex].Average30s,
#else
	     0.0,
#endif
	     (int)(ALTITUDEMODIFY * GPS_INFO.FLARM_Traffic[DrawListIndex].Altitude)
	     );
    wsprintf(text, TEXT("%s %3.0lf %2.1lf"),
	     tmp,
	     bear,
	     (DISTANCEMODIFY * range));

    int txtLen = wcslen(text);
    if (txtLen>0 && GPS_INFO.FLARM_Traffic[DrawListIndex].ID != 0) 
      {
	ExtTextOut(hDC, 2*InfoBoxLayout::scale, 2*InfoBoxLayout::scale,
		   ETO_OPAQUE, NULL,
		   text,
		   txtLen, 
		   NULL);	  
      }
    UnlockFlightData();
d219 1
a219 1
      if (GPS_INFO.FLARM_Traffic[index].Name[0] == 0)
d255 1
a255 1
      dlgTextEntryShowModal(newName, 4);
d258 1
@
